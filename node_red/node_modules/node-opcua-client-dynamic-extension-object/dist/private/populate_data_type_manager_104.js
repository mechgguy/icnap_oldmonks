"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readDataTypeDefinitionAndBuildType = readDataTypeDefinitionAndBuildType;
exports.populateDataTypeManager104 = populateDataTypeManager104;
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_factory_1 = require("node-opcua-factory");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_pseudo_session_1 = require("node-opcua-pseudo-session");
const node_opcua_schemas_1 = require("node-opcua-schemas");
const node_opcua_types_1 = require("node-opcua-types");
const convert_data_type_definition_to_structuretype_schema_1 = require("../convert_data_type_definition_to_structuretype_schema");
const errorLog = (0, node_opcua_debug_1.make_errorLog)(__filename);
const debugLog = (0, node_opcua_debug_1.make_debugLog)(__filename);
const warningLog = (0, node_opcua_debug_1.make_warningLog)(__filename);
const doDebug = (0, node_opcua_debug_1.checkDebugFlag)(__filename);
async function readDataTypeDefinitionAndBuildType(session, dataTypeNodeId, name, dataTypeFactory, cache) {
    try {
        if (dataTypeFactory.getStructureInfoForDataType(dataTypeNodeId)) {
            return;
        }
        const [isAbstractDataValue, dataTypeDefinitionDataValue] = await session.read([
            {
                attributeId: node_opcua_data_model_1.AttributeIds.IsAbstract,
                nodeId: dataTypeNodeId
            },
            {
                attributeId: node_opcua_data_model_1.AttributeIds.DataTypeDefinition,
                nodeId: dataTypeNodeId
            }
        ]);
        /* istanbul ignore next */
        if (isAbstractDataValue.statusCode.isNotGood()) {
            throw new Error(" Cannot find dataType isAbstract ! with nodeId =" + dataTypeNodeId.toString());
        }
        const isAbstract = isAbstractDataValue.value.value;
        let dataTypeDefinition = dataTypeDefinitionDataValue.value.value;
        /* istanbul ignore next */
        if (dataTypeDefinitionDataValue.statusCode.isNotGood()) {
            // may be we are reading a 1.03 server
            // or it could be some of the di:ParameterResultDataType that are not marked as abstract
            // in some cases
            if (!isAbstract) {
                const [isAbstract2, browseNameDV] = await session.read([
                    { nodeId: dataTypeNodeId, attributeId: node_opcua_data_model_1.AttributeIds.IsAbstract },
                    { nodeId: dataTypeNodeId, attributeId: node_opcua_data_model_1.AttributeIds.BrowseName }
                ]);
                warningLog(" Cannot find dataType Definition ! with nodeId =" + dataTypeNodeId.toString(), browseNameDV.value?.value?.toString(), isAbstract2.value?.value);
                return;
            }
            // it is OK to not have dataTypeDefinition for Abstract type!
            dataTypeDefinition = new node_opcua_types_1.StructureDefinition();
        }
        const schema = await (0, convert_data_type_definition_to_structuretype_schema_1.convertDataTypeDefinitionToStructureTypeSchema)(session, dataTypeNodeId, name, dataTypeDefinition, null, dataTypeFactory, isAbstract, cache);
        if (isAbstract) {
            // cannot construct an abstract structure
            dataTypeFactory.registerAbstractStructure(dataTypeNodeId, name, schema);
        }
        else {
            const Constructor = (0, node_opcua_schemas_1.createDynamicObjectConstructor)(schema, dataTypeFactory);
        }
    }
    catch (err) {
        errorLog("Error", err);
    }
}
async function populateDataTypeManager104(session, dataTypeManager) {
    const cache = {};
    async function withDataType(r) {
        const dataTypeNodeId = r.nodeId;
        try {
            if (dataTypeNodeId.namespace === 0) {
                // already known I guess
                return;
            }
            let dataTypeFactory = dataTypeManager.getDataTypeFactory(dataTypeNodeId.namespace);
            if (!dataTypeFactory) {
                dataTypeFactory = new node_opcua_factory_1.DataTypeFactory([]);
                dataTypeManager.registerDataTypeFactory(dataTypeNodeId.namespace, dataTypeFactory);
                //   throw new Error("cannot find dataType Manager for namespace of " + dataTypeNodeId.toString());
            }
            // if not found already
            if (dataTypeFactory.getStructureInfoForDataType(dataTypeNodeId)) {
                // already known !
                return;
            }
            // extract it formally
            doDebug && debugLog(" DataType => ", r.browseName.toString(), dataTypeNodeId.toString());
            await readDataTypeDefinitionAndBuildType(session, dataTypeNodeId, r.browseName.name, dataTypeFactory, cache);
        }
        catch (err) {
            errorLog("err=", err);
        }
    }
    const nodeToBrowse = {
        nodeId: node_opcua_nodeid_1.NodeId.nullNodeId, // to be replaced
        includeSubtypes: true,
        browseDirection: node_opcua_data_model_1.BrowseDirection.Forward,
        nodeClassMask: 0xff,
        referenceTypeId: (0, node_opcua_nodeid_1.resolveNodeId)("HasSubtype"),
        resultMask: 0xff
    };
    await applyOnReferenceRecursively(session, (0, node_opcua_nodeid_1.resolveNodeId)("Structure"), nodeToBrowse, withDataType);
}
async function applyOnReferenceRecursively(session, nodeId, browseDescriptionTemplate, action) {
    const oneLevel = async (nodeId) => {
        const nodeToBrowse = {
            ...browseDescriptionTemplate,
            nodeId
        };
        const browseResult = await (0, node_opcua_pseudo_session_1.browseAll)(session, nodeToBrowse);
        const promises = [];
        for (const ref of browseResult.references || []) {
            promises.push((async () => {
                await action(ref);
                await oneLevel(ref.nodeId);
            })());
        }
        await Promise.all(promises);
    };
    await oneLevel(nodeId);
}
//# sourceMappingURL=populate_data_type_manager_104.js.map