"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeOPCUAFile = writeOPCUAFile;
const node_fs_1 = __importDefault(require("node:fs"));
const node_stream_1 = require("node:stream");
const promises_1 = require("node:stream/promises");
const node_opcua_binary_stream_1 = require("node-opcua-binary-stream");
const node_opcua_debug_1 = require("node-opcua-debug");
const client_file_1 = require("./client_file");
const read_max_byte_string_length_1 = require("./read_max_byte_string_length");
const get_transport_max_size_1 = require("./get_transport_max_size");
const debugLog = (0, node_opcua_debug_1.make_debugLog)("FileType");
// const errorLog = make_errorLog("FileType");
// const warningLog = make_warningLog("FileType");
const doDebug = (0, node_opcua_debug_1.checkDebugFlag)("FileType");
async function writeOPCUAFile(clientFile, filePath, { chunkSize }) {
    const maxMessageSize = (0, get_transport_max_size_1.getTransportMaxMessageSize)(clientFile.session);
    chunkSize = chunkSize === undefined ? await (0, read_max_byte_string_length_1.readMaxByteStringLength)(clientFile.session) : chunkSize;
    chunkSize = Math.min(chunkSize, node_opcua_binary_stream_1.BinaryStream.maxByteStringLength);
    if (maxMessageSize > 200) {
        chunkSize = Math.min(chunkSize, maxMessageSize - 1000);
    }
    if (!node_fs_1.default.existsSync(filePath)) {
        throw new Error(`File ${filePath} does not exist`);
    }
    const readStream = node_fs_1.default.createReadStream(filePath, { highWaterMark: chunkSize });
    await clientFile.open(client_file_1.OpenFileMode.WriteEraseExisting);
    await clientFile.setPosition(0);
    try {
        const outStream = new node_stream_1.Writable({
            write(chunk, encoding, callback) {
                doDebug && debugLog("writing chunk", chunk.length);
                clientFile
                    .write(chunk)
                    .then(() => callback())
                    .catch((err) => callback(err));
            }
        });
        // note: pipeline requires NodeJS 15 or above
        await (0, promises_1.pipeline)(readStream, outStream);
    }
    catch (e) {
        debugLog(e.message);
        throw e;
    }
    finally {
        doDebug && debugLog("closing the OPCUA File");
        await clientFile.close();
    }
}
//# sourceMappingURL=write_file.js.map