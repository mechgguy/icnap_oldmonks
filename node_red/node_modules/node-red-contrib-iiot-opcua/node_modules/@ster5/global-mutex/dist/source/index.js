"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetLock = exports.withLock = exports.toSentinel = exports.defaultStaleDuration = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const assert_1 = __importDefault(require("assert"));
const crypto_1 = require("crypto");
exports.defaultStaleDuration = 2 * 60 * 1000; // two minutes
const doDebug = false;
const toMutex = (lockfile) => {
    const tmpFolder = os.tmpdir();
    const normalizedLockFile = path.normalize(lockfile);
    const hash = path.join(tmpFolder, (0, crypto_1.createHash)("sha1").update(normalizedLockFile).digest("hex"));
    return hash;
};
const toSentinel = (lockfile) => {
    // console.log("hash = ", hash + ".sentinel", lockfile);
    return toMutex(lockfile) + ".sentinel";
};
exports.toSentinel = toSentinel;
function smartRemove(file) {
    try {
        fs.unlinkSync(file);
        (0, assert_1.default)(!fs.existsSync(file));
    }
    catch (err) {
        if (!(err instanceof Error)) {
            throw err;
        }
        if (err.message.match(/ENOENT/)) {
            return;
        }
        //    console.log("smartRemove = ", file, err.message);
        throw err;
    }
}
function removeIfTooOld(lockfile, maxStaleDuration) {
    const sentinel = (0, exports.toSentinel)(lockfile);
    try {
        const stat = fs.statSync(sentinel);
        const now = Date.now();
        if (stat.mtime.getTime() < now - maxStaleDuration) {
            smartRemove(sentinel);
            smartRemove(lockfile);
            return false;
        }
    }
    catch (err) {
        if (!(err instanceof Error)) {
            return false;
        }
        if (err.message.match(/ENOENT/)) {
            // sentinel file doesn't not exists , or is locked
            try {
                smartRemove(lockfile);
            }
            catch (err) {
                if (!(err instanceof Error)) {
                    return false;
                }
                if (err.message.match(/EPERM/)) {
                    // file is really locked ; it cannot be removed :
                    return true;
                }
            }
            return false;
        }
        if (err.message.match(/EPERM/)) {
            // file is really locked ; it cannot be removed :
            return true;
        }
        // unexpected case
        console.log(err);
    }
    finally {
    }
    return false;
}
const _safeGuard = {};
function pause(duration) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => setTimeout(resolve, duration));
    });
}
const pulse = (sentinel, interval, data) => {
    if (data.active) {
        fs.writeFileSync(sentinel, Date.now().toString());
        if (data.active) {
            data.id = setTimeout(pulse, interval, sentinel, interval, data);
        }
    }
};
function acquireLock(lockfile) {
    // let's make a attempt to open the lock file with exclusive access
    try {
        const fd = fs.openSync(lockfile, "wx+");
        fs.writeSync(fd, ".");
        fs.closeSync(fd);
        return true;
    }
    catch (err) {
        return false;
    }
}
function retryLater(options) {
    return __awaiter(this, void 0, void 0, function* () {
        if (doDebug) {
            console.log("retry in ", options.retryInterval, options.lockfile, options.lockFileMutex);
        }
        yield pause(options.retryInterval);
        return yield lock(options);
    });
}
let lockCount = 0;
function lock(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const _options = adjustOptions(options);
        if (_safeGuard[_options.lockfile]) {
            // already lock  by a internal process : let's wait"
            yield pause(_options.retryInterval);
            return lock(_options);
        }
        const reallyLocked = removeIfTooOld(_options.lockfile, _options.maxStaleDuration);
        if (reallyLocked) {
            return yield retryLater(_options);
        }
        if (!acquireLock(_options.lockFileMutex)) {
            // we cannot acquire the lock, let's try again a little bit later
            return yield retryLater(_options);
        }
        if (doDebug) {
            console.log(`a lock has been acquired on file ${_options.lockfile}.`);
        }
        /* first thing to do here */
        /* istanbul ignore next */
        if (_safeGuard[_options.lockfile]) {
            // throw new Error("Error in lock");
            /// arg! a raise condition!
            return yield retryLater(_options);
        }
        const data = { active: true };
        _safeGuard[_options.lockfile] = data;
        pulse(_options.mutexSentinel, _options.maxStaleDuration / 3, data);
        // istanbul ignore next
        if (doDebug) {
            console.log("Locked !", lockCount);
        }
        lockCount += 1;
    });
}
function unlock(options) {
    const data = _safeGuard[options.lockfile];
    // istanbul ignore next
    if (!data) {
        throw new Error("File is not locked" + options.lockfile);
    }
    if (data.id) {
        clearTimeout(data.id);
        data.id = undefined;
    }
    const sentinel = (0, exports.toSentinel)(options.lockfile);
    data.active = false;
    lockCount -= 1;
    // istanbul ignore next
    if (doDebug) {
        console.log("unlocked", lockCount);
    }
    delete _safeGuard[options.lockfile];
    smartRemove(sentinel);
    smartRemove(options.lockFileMutex);
}
function withLock(options, action) {
    return __awaiter(this, void 0, void 0, function* () {
        const _options = adjustOptions(options);
        yield lock(_options);
        try {
            return yield action();
        }
        finally {
            try {
                unlock(_options);
            }
            catch (err) {
                // istanbul ignore next
                console.log("Error in Unlock !!!", err.message);
            }
        }
    });
}
exports.withLock = withLock;
function isDirectory(path) {
    try {
        // note: file might be deleted before lstatSync is called
        // after being detected as existing with fs.existsSync
        // thefore the try/catch block
        return fs.existsSync(path) && fs.lstatSync(path).isDirectory();
    }
    catch (err) {
        return false;
    }
}
function adjustOptions(options) {
    options.lockfile = path.normalize(options.lockfile);
    // check lock file
    if (!options.lockfile || !fs.existsSync(path.dirname(options.lockfile))) {
        throw new Error("Invalid lockfile specified :" + options.lockfile);
    }
    if (isDirectory(options.lockfile)) {
        throw new Error("Invalid lockfile specified (cannot be a existing folder):" +
            options.lockfile);
    }
    options.maxStaleDuration =
        !options.maxStaleDuration || options.maxStaleDuration <= 100
            ? exports.defaultStaleDuration
            : options.maxStaleDuration;
    options.retryInterval = Math.min(Math.floor(options.maxStaleDuration / 2.5), !options.retryInterval || options.retryInterval <= 0
        ? 100
        : options.retryInterval);
    const options2 = options;
    options2.lockFileMutex = toMutex(options.lockfile);
    options2.mutexSentinel = (0, exports.toSentinel)(options.lockfile);
    return options2;
}
function resetLock(lockfile) {
    smartRemove(lockfile);
    smartRemove(toMutex(lockfile));
    smartRemove((0, exports.toSentinel)(lockfile));
}
exports.resetLock = resetLock;
//# sourceMappingURL=index.js.map