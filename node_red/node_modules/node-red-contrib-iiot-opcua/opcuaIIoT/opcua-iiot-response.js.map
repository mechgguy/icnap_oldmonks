{"version":3,"sources":["../src/opcua-iiot-response.ts"],"names":[],"mappings":"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","file":"opcua-iiot-response.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport coreResponse, {ResponseInputPayload} from \"./core/opcua-iiot-core-response\";\nimport {\n  IotOpcUaNodeMessage,\n  checkItemForUnsetState,\n  checkResponseItemIsNotToFilter,\n  isNodeTypeToFilterResponse\n} from \"./core/opcua-iiot-core\";\nimport {NodeMessageInFlow} from \"@node-red/registry\";\nimport {Node, NodeAPI, NodeDef} from \"node-red\";\nimport {AddressSpaceItem, StatusInput} from \"./types/helpers\";\nimport {BrowseResult} from \"node-opcua\";\nimport {CrawlerPayload} from \"./opcua-iiot-crawler\";\nimport {BrowserPayload} from \"./opcua-iiot-browser\";\nimport {AnyPayload} from \"./types/payloads\";\nimport {ReadPayload} from \"./opcua-iiot-read\";\nimport _ from 'underscore';\n\ntype Filter = {\n  name: string\n  value: string\n}\n\ninterface OPCUAIIoTResponse extends nodered.Node {\n  name: string\n  compressStructure: boolean\n  showStatusActivities: boolean\n  showErrors: boolean\n  activateUnsetFilter: boolean\n  activateFilters: boolean\n  negateFilter: boolean\n  filters: Filter[]\n  iiot: TodoTypeAny\n  functions?: Record<string, (...args: any) => any>\n}\n\ninterface OPCUAIIoTResponseDef extends nodered.NodeDef {\n  name: string\n  compressStructure: boolean\n  showStatusActivities: boolean\n  showErrors: boolean\n  activateUnsetFilter: boolean\n  activateFilters: boolean\n  negateFilter: boolean\n  filters: Filter[]\n}\n\n/**\n * Response analyser Node-RED node for OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTResponse(this: OPCUAIIoTResponse, config: OPCUAIIoTResponseDef) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.compressStructure = config.compressStructure\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.activateUnsetFilter = config.activateUnsetFilter\n    this.activateFilters = config.activateFilters\n    this.negateFilter = config.negateFilter\n    this.filters = config.filters\n\n    let self: OPCUAIIoTResponse = this\n    self.iiot = {}\n\n    // prototype functions don't seem to be copied in the above line\n    // explicitly define node.status here, so it can be used by functions in core-response.ts\n    self.status = this.status\n\n\n    this.status({fill: 'green', shape: 'ring', text: 'active'})\n\n    const handleBrowserMsg = function (payload: BrowserPayload) {\n      coreResponse.analyzeBrowserResults(self, payload)\n      if (self.compressStructure) {\n        coreResponse.compressBrowseMessageStructure(payload)\n      }\n      return payload\n    }\n\n    const handleCrawlerMsg = function (payload: CrawlerPayload) {\n      coreResponse.analyzeCrawlerResults(self, payload)\n      if (self.compressStructure) {\n        coreResponse.compressCrawlerMessageStructure(payload)\n      }\n      return payload\n    }\n\n    const handleReadMsg = function (payload: ReadPayload) {\n      coreResponse.analyzeReadResults(self, payload)\n      if (self.compressStructure) {\n        coreResponse.compressReadMessageStructure(payload)\n      }\n      return payload\n    }\n\n    const handleWriteMsg = function (payload: ResponseInputPayload) {\n      coreResponse.analyzeWriteResults(self, payload)\n      if (self.compressStructure) {\n        coreResponse.compressWriteMessageStructure(payload)\n      }\n      return payload\n    }\n\n    const handleListenerMsg = function (payload: ResponseInputPayload) {\n      coreResponse.analyzeListenerResults(self, payload)\n      if (self.compressStructure) {\n        coreResponse.compressListenMessageStructure(payload)\n      }\n      return payload\n    }\n\n    const handleMethodMsg = function (payload: ResponseInputPayload) {\n      coreResponse.analyzeMethodResults(self, payload)\n      if (self.compressStructure) {\n        coreResponse.compressMethodMessageStructure(payload)\n      }\n      return payload\n    }\n\n    const handleDefaultMsg = function (payload: ResponseInputPayload) {\n      if (payload) {\n        coreResponse.handlePayloadStatusCode(self, (payload.value as StatusInput | StatusInput[]), payload)\n        if (self.compressStructure) {\n          coreResponse.compressDefaultMessageStructure(payload)\n        }\n      }\n      return payload\n    }\n\n    const handleNodeTypeOfMsg = function (payload: AnyPayload) {\n      switch (payload.nodetype) {\n        case 'browse':\n          return handleBrowserMsg(payload as BrowserPayload)\n        case 'crawl':\n          return handleCrawlerMsg(payload as CrawlerPayload)\n        case 'read':\n          return handleReadMsg(payload)\n        case 'write':\n          return handleWriteMsg(payload)\n        case 'listen':\n          return handleListenerMsg(payload)\n        case 'method':\n          return handleMethodMsg(payload)\n        default:\n          return handleDefaultMsg(payload)\n      }\n    }\n\n    const extractReadEntriesFromFilter = function (payload: ResponseInputPayload) {\n      let filteredEntries: AddressSpaceItem[] = []\n      let filteredValues: number[] = []\n\n      if (payload.value.length) {\n        payload.value.forEach((item: AddressSpaceItem, index: number) => {\n          if (itemIsNotToFilter(item)) {\n            filteredEntries.push(item)\n            filteredValues.push(index)\n          }\n        })\n      }\n\n      if (payload.nodesToRead) {\n        payload.nodesToRead = payload.nodesToRead.filter((item: AddressSpaceItem, index: number) => {\n          return filteredValues.includes(index)\n        })\n      }\n\n      return filteredEntries\n    }\n\n    const extractBrowserEntriesFromFilter = function (payload: ResponseInputPayload) {\n      return payload.browserResults?.filter((item: BrowseResult) => {\n        return itemIsNotToFilter(item)\n      })\n    }\n\n    const extractCrawlerEntriesFromFilter = function (payload: ResponseInputPayload) {\n      const filter = payload.crawlerResults?.length === payload.addressSpaceItems?.length\n        ? payload.value\n        : payload.crawlerResults;\n\n      return filter.filter((item: BrowseResult) => {\n        return itemIsNotToFilter(item)\n      })\n    }\n\n    const extractPayloadEntriesFromFilter = function (payload: ResponseInputPayload) {\n      return payload.value.filter((item: TodoTypeAny) => {\n        return itemIsNotToFilter(item)\n      })\n    }\n\n    const extractMethodEntriesFromFilter = function (payload: ResponseInputPayload) {\n      let filteredEntries: TodoTypeAny[] = []\n      let filteredValues: TodoTypeAny[] = []\n      payload.addressSpaceItems.forEach((item: TodoTypeAny, index: number) => {\n        if (itemIsNotToFilter(item)) {\n          filteredEntries.push(item)\n          filteredValues.push(index)\n        }\n      })\n\n      let outputArguments: TodoTypeAny\n      if (payload.results) {\n        outputArguments = payload.results.outputArguments\n      } else {\n        outputArguments = payload.outputArguments\n      }\n\n      if (outputArguments) {\n        outputArguments.forEach((item: TodoTypeAny, index: number) => {\n          if (itemIsNotToFilter(item)) {\n            if (filteredValues.includes(index)) {\n              filteredEntries[index].dataType = item.dataType\n              filteredEntries[index].arrayType = item.arrayType\n              filteredEntries[index].value = item.value\n            }\n          }\n        })\n      }\n\n      return filteredEntries\n    }\n\n    const extractEntries = function (payload: ResponseInputPayload) {\n      switch (payload.nodetype) {\n        case 'read':\n          return extractReadEntriesFromFilter(payload)\n        case 'browse':\n          return extractBrowserEntriesFromFilter(payload)\n        case 'crawl':\n          return extractCrawlerEntriesFromFilter(payload)\n        case 'method':\n          return extractMethodEntriesFromFilter(payload)\n        default:\n          return extractPayloadEntriesFromFilter(payload)\n      }\n    }\n\n    const filterMsg = function (payload: ResponseInputPayload) {\n      if (payload.value.length || isNodeTypeToFilterResponse(payload)) {\n        let filteredEntries = extractEntries(payload)\n        if (filteredEntries?.length) {\n          payload.value = filteredEntries\n          payload.payloadType = \"filtered\"\n          return payload\n        }\n      } else {\n        if (itemIsNotToFilter(payload)) {\n          payload.payloadType = \"unfiltered\"\n          return payload\n        }\n      }\n      return null\n    }\n\n    /**\n     * Ensure msg has the NodeMessageInFlow format\n     */\n    const normalizeMessage = (msg: Record<string, any>): NodeMessageInFlow => {\n      if (Object.keys(msg).length <= 3) {\n        return msg as NodeMessageInFlow;\n      }\n      return {\n        topic: msg.topic,\n        _msgid: msg._msgid,\n        payload: {\n          ...msg,\n          value: msg.payload,\n        }\n      }\n    }\n\n    this.on('input', (msg: NodeMessageInFlow) => {\n      try {\n\n        this.status({fill: 'green', shape: 'dot', text: 'active'})\n\n        const internalMsg = msg as IotOpcUaNodeMessage\n\n        if (self.activateUnsetFilter) {\n          if (msg.payload === void 0 ||\n              _.isNull(msg.payload) ||\n              _.isEmpty(msg.payload) ||\n              _.isNull(internalMsg.payload.value)) {\n            self.error(new Error(\"Message Structure Is Not As Expected! (expected: msg.payload.value)\"))\n            return\n          }\n        }\n\n        msg = normalizeMessage(msg as any)\n\n        const inputPayload = msg.payload as AnyPayload;\n        const handledPayload = {\n          ... handleNodeTypeOfMsg(inputPayload),\n          compressed: self.compressStructure,\n          payloadType: \"handled\",\n        }\n\n        if (self.activateFilters && self.filters && self.filters.length > 0) {\n          const filteredPayload = filterMsg(handledPayload)\n\n          if (filteredPayload) {\n            this.send({... msg, payload: filteredPayload})\n          }\n        } else {\n          this.send({... msg, payload: handledPayload})\n        }\n      } catch (err) {\n        coreResponse.internalDebugLog(err)\n        if (self.showErrors) {\n          this.error(err, msg)\n        }\n      }\n    })\n\n    const itemIsNotToFilter = function (item: any) {\n      let result = checkItemForUnsetState(self, item)\n\n      self.filters.forEach((element: any) => {\n        result = checkResponseItemIsNotToFilter(self, item, element, result)\n      })\n\n      return (self.negateFilter) ? !result : result\n    }\n\n    if (process.env.TEST === \"true\")\n      self.functions = {\n        handleNodeTypeOfMsg,\n      }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Response', OPCUAIIoTResponse)\n}\n"]}