{"version":3,"sources":["../src/opcua-iiot-server-aso.ts"],"names":[],"mappings":"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","file":"opcua-iiot-server-aso.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport {NodeMessageInFlow} from \"node-red\";\nimport {OBJECTS_ROOT, resetIiotNode} from \"./core/opcua-iiot-core\";\nimport {ReferenceTypeIds} from \"node-opcua\";\nimport {logger} from \"./core/opcua-iiot-core-connector\";\nimport internalDebugLog = logger.internalDebugLog;\n\ninterface OPCUAIIoTASO extends nodered.Node {\n  nodeId: string\n  browsename: string\n  displayname: string\n  objecttype: string\n  referencetype: string\n  referenceNodeId: string\n  datatype: string\n  value: string\n  name: string\n\n}\n\ninterface OPCUAIIoTCMDASO extends nodered.NodeDef {\n  nodeId: string\n  browsename: string\n  displayname: string\n  objecttype: string\n  referencetype: string\n  referenceNodeId: string\n  datatype: string\n  value: string\n  name: string\n}\n\n/**\n * Address space object Node-RED node.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTASO(this: OPCUAIIoTASO, config: OPCUAIIoTCMDASO) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.browsename = config.browsename\n    this.displayname = config.displayname\n    this.objecttype = config.objecttype\n    this.referencetype = config.referencetype\n    this.referenceNodeId = config.referenceNodeId\n    this.datatype = config.datatype\n    this.value = config.value\n    this.name = config.name\n\n    let self = this\n    internalDebugLog('Open ASO Node')\n\n    this.on('input', (msg: NodeMessageInFlow | TodoTypeAny) => {\n      if (msg.payload.nodetype === 'inject') {\n        self.nodeId = msg.payload.topic || self.nodeId\n        self.datatype = msg.payload.datatype || self.datatype\n        self.value = msg.payload.payload || self.value\n      }\n      const value = self.value || msg.payload.value;\n      msg = {payload: {}} // clean message\n      msg.topic = 'ServerAddressSpaceObject'\n      msg.payload.nodetype = 'inject'\n      msg.payload.injectType = 'ASO'\n\n      if (self.nodeId.includes('i=') || self.nodeId.includes('s=') || self.nodeId.includes('b=')) {\n        msg.payload.nodeId = self.nodeId\n        msg.payload.browsename = self.browsename\n        msg.payload.displayname = self.displayname\n        msg.payload.objecttype = self.objecttype\n        msg.payload.datatype = self.datatype\n        msg.payload.value = value\n\n        msg.payload.referenceNodeId = self.referenceNodeId || OBJECTS_ROOT\n        msg.payload.referencetype = self.referencetype || ReferenceTypeIds.Organizes\n\n        internalDebugLog('node msg stringified: ' + JSON.stringify(msg))\n        this.send(msg)\n      } else {\n        /* istanbul ignore next */\n        this.error(new Error('ASO NodeId Is Not Valid'), msg)\n      }\n    })\n\n    this.on('close', (done: () => void) => {\n      internalDebugLog('Close ASO Node')\n      resetIiotNode(self)\n      done()\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server-ASO', OPCUAIIoTASO)\n}\n"]}