{"version":3,"sources":["../src/opcua-iiot-write.ts"],"names":[],"mappings":"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","file":"opcua-iiot-write.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport {\n  TodoTypeAny,\n  TodoVoidFunction,\n} from \"./types/placeholders\";\nimport coreClient from \"./core/opcua-iiot-core-client\";\nimport {\n  buildNodesToWrite,\n  checkConnectorState,\n  checkSessionNotValid,\n  deregisterToConnector,\n  initCoreNode,\n  isInitializedIIoTNode,\n  isSessionBad,\n  registerToConnector,\n  resetIiotNode\n} from \"./core/opcua-iiot-core\";\n\nimport {WriteValueOptions} from \"node-opcua-service-write\";\nimport {Node, NodeAPI, NodeDef, NodeMessage, NodeMessageInFlow, NodeStatus} from \"node-red\";\nimport {BrowserPayload} from \"./opcua-iiot-browser\";\nimport {ClientSession, ClientSessionWriteService, StatusCode, StatusCodes} from \"node-opcua\";\n\n\ninterface OPCUAIIoTWrite extends Node {\n  name: string\n  justValue: string\n  showStatusActivities: boolean\n  showErrors: boolean\n  connector: Node\n}\n\ninterface OPCUAIIoTWriteDef extends NodeDef {\n  name: string\n  justValue: string\n  showStatusActivities: boolean\n  showErrors: boolean\n  connector: string\n}\n\nexport type WriteResult = {\n  statusCodes: StatusCode[] | undefined,\n  nodesToWrite: TodoTypeAny,\n  msg: NodeMessageInFlow & TodoTypeAny\n}\n\nexport type WriteResultMessage = NodeMessageInFlow & {\n  payload: WritePayload\n}\n\nexport type WritePayload = {\n  nodetype: 'write'\n  justValue: TodoTypeAny\n  nodesToWrite: TodoTypeAny[]\n  value: TodoTypeAny\n  valuesToWrite: TodoTypeAny\n}\n\n/**\n * Write Node-RED node.\n *\n * @param RED\n */\nmodule.exports = (RED: NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTWrite(this: OPCUAIIoTWrite, config: OPCUAIIoTWriteDef) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.justValue = config.justValue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let self: TodoTypeAny = this;\n    self.iiot = initCoreNode()\n\n    const handleWriteError = (err: Error, msg: NodeMessage) => {\n      coreClient.writeDebugLog(err)\n      if (self.showErrors) {\n        this.error(err, msg)\n      }\n\n      /* istanbul ignore next */\n      if (isSessionBad(err)) {\n        this.emit('opcua_client_not_ready')\n      }\n    }\n\n    const writeToSession = (session: ClientSessionWriteService, originMsg: TodoTypeAny) => {\n      if (checkSessionNotValid(session, 'Writer')) {\n        /* istanbul ignore next */\n        return\n      }\n\n      let msg = Object.assign({}, originMsg)\n      const nodesToWrite: WriteValueOptions[] = buildNodesToWrite(msg)\n      coreClient.write(session, nodesToWrite, msg).then((writeResult: WriteResult): void => {\n        try {\n          let message = buildResultMessage(writeResult)\n          this.send(message)\n        } catch (err: any) {\n          /* istanbul ignore next */\n          isInitializedIIoTNode(self) ? handleWriteError(err, msg) : coreClient.internalDebugLog(err.message)\n        }\n      }).catch(function (err: Error) {\n        /* istanbul ignore next */\n        isInitializedIIoTNode(self) ? handleWriteError(err, msg) : coreClient.internalDebugLog(err.message)\n      })\n    }\n\n    const buildResultMessage = (result: WriteResult): WriteResultMessage => {\n      let message = Object.assign({}, result.msg)\n      message.payload.nodetype = 'write'\n      message.payload.justValue = self.justValue\n\n      message.payload.value = extractDataValue(message, result)\n      return message\n    }\n\n    const extractDataValue = (message: WriteResultMessage, result: WriteResult): TodoTypeAny => {\n      let dataValues: string\n      if (self.justValue) {\n        if (message.payload.valuesToWrite) {\n          delete message.payload['valuesToWrite']\n        }\n\n        return {\n          statusCodes: result.statusCodes\n        }\n      } else {\n        delete result['msg']\n        return result\n      }\n    }\n\n    const errorHandler = (err: Error, msg: NodeMessage) => {\n      this.error(err, msg)\n    }\n\n    const emitHandler = (msg: string) => {\n      this.emit(msg)\n    }\n\n    const statusHandler = (status: string | NodeStatus): void => {\n      this.status(status)\n    }\n\n    this.on('input', (msg: NodeMessageInFlow) => {\n      if (!checkConnectorState(self, msg, 'Write', errorHandler, emitHandler, statusHandler)) {\n        return\n      }\n      const payload = msg.payload as BrowserPayload\n      // recursivePrintTypes(msg);\n      if (payload.injectType === 'write') {\n        writeToSession(self.connector.iiot.opcuaSession, msg)\n      } else {\n        coreClient.writeDebugLog('Wrong Inject Type ' + payload.injectType + '! The Type has to be write.')\n        /* istanbul ignore next */\n        if (self.showErrors) {\n          this.warn('Wrong Inject Type ' + payload.injectType + '! The msg.payload.injectType has to be write.')\n        }\n      }\n    })\n\n    const onAlias = (event: string, callback: () => void) => {\n      // @ts-ignore\n      this.on(event, callback)\n    }\n\n    registerToConnector(self, statusHandler, onAlias, errorHandler)\n\n    this.on('close', (done: TodoVoidFunction) => {\n      self.removeAllListeners()\n\n      deregisterToConnector(self, () => {\n        resetIiotNode(self)\n        done()\n      })\n    })\n    if (process.env.TEST === \"true\") {\n      self.functions = {\n        handleWriteError\n      }\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Write', OPCUAIIoTWrite)\n}\n"]}