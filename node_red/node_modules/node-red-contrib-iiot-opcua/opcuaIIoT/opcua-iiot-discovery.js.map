{"version":3,"sources":["../src/opcua-iiot-discovery.ts"],"names":[],"mappings":"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","file":"opcua-iiot-discovery.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {NodeMessageInFlow} from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport coreDiscovery from \"./core/opcua-iiot-core-discovery\";\nimport {\n  ApplicationType,\n  extractFullyQualifiedDomainName,\n  makeApplicationUrn,\n  OPCUACertificateManager,\n  OPCUADiscoveryServer,\n  OPCUAServerEndPoint, UAString\n} from \"node-opcua\";\nimport path from \"path\";\nimport {ApplicationDescription} from \"node-opcua-service-endpoints\";\n\ninterface OPCUAIIoTDiscovery extends nodered.Node {\n  discoveryPort: number\n}\n\ninterface OPCUAIIoTDiscoveryDef extends nodered.NodeDef {\n  discoveryPort: number\n}\n\nexport interface DiscoveryMessage extends NodeMessageInFlow {\n  payload: DiscoveryMessagePayload\n}\n\ninterface DiscoveryMessagePayload {\n  discoveryUrls: string[]\n  endpoints: OPCUAServerEndPoint[]\n}\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTDiscovery(this: OPCUAIIoTDiscovery, config: OPCUAIIoTDiscoveryDef) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.discoveryPort = config.discoveryPort || coreDiscovery.DEFAULT_OPCUA_DISCOVERY_PORT\n\n    let self: TodoTypeAny = this\n\n    //Create and Start the Discovery Server\n    const startDiscoveryServer = async () => {\n      // Access the certificates created by installation\n      const certificateFolder = process.env.CERTIFICATES || '../certificates';\n\n      const serverCertificateManager = new OPCUACertificateManager({\n        automaticallyAcceptUnknownCertificate: true,\n        rootFolder: certificateFolder,\n        name: \"pki\"\n      });\n\n      const certificateFile = path.join(certificateFolder, \"discoveryServer_cert_2048.pem\");\n      const privateKeyFile = serverCertificateManager.privateKey\n\n      await serverCertificateManager.initialize()\n\n      const discoveryServer = new OPCUADiscoveryServer({\n        certificateFile,\n        privateKeyFile,\n        serverCertificateManager,\n        serverInfo: {\n          applicationUri: makeApplicationUrn(await extractFullyQualifiedDomainName(), self.name || 'discovery'),\n        },\n        port: self.discoveryPort,\n      })\n\n      try {\n        await discoveryServer.start()\n        this.status({fill: 'green', shape: 'dot', text: 'active'})\n        coreDiscovery.internalDebugLog('discovery server started')\n      } catch (err: TodoTypeAny) {\n        this.status({fill: 'red', shape: 'dot', text: 'error'})\n        this.error(new Error('Error starting discovery server: ' + err.message))\n      }\n\n      return discoveryServer\n    }\n\n    this.status({fill: 'yellow', shape: 'ring', text: 'starting'})\n\n    self.discoveryServer = startDiscoveryServer().then((server) => {\n      this.status({fill: 'green', shape: 'dot', text: 'active'})\n      return server\n    }).catch((err) => {\n      this.status({fill: 'red', shape: 'dot', text: 'error'})\n      this.error(new Error('Error starting discovery server: ' + err.message))\n      return undefined\n    })\n\n    // Convert the numeric Enum value to the string label, for user readability\n    const applicationTypeToString = (applicationType: ApplicationType): string => {\n      return ApplicationType[applicationType]\n    }\n\n    // Create the payload objects\n    const parseServerList = (serverList: ApplicationDescription[]): { discoveryUrls: string[], endpoints: TodoTypeAny[] } => {\n      const endpoints = serverList.map((server) => {\n        return {\n          applicationUri: server.applicationUri,\n          productUri: server.productUri,\n          applicationName: server.applicationName,\n          applicationType: applicationTypeToString(server.applicationType),\n          gatewayServerUri: server.gatewayServerUri,\n          discoveryProfileUri: server.discoveryProfileUri,\n          discoveryUrls: server.discoveryUrls,\n        }\n      });\n\n      const discoveryUrls = endpoints.flatMap((server) => (server.discoveryUrls || [])).filter((item, index, list): item is string => !!item && list.indexOf(item) === index)\n\n      return {\n        discoveryUrls,\n        endpoints,\n      }\n    }\n\n    this.on('input', async (msg) => {\n      // Ensure that the discovery server has been started\n      const discoveryServer: OPCUADiscoveryServer = await self.discoveryServer\n\n      if (!discoveryServer) {\n        const error = new Error('Discovery server undefined')\n        this.error(error)\n        this.send({\n          ...msg,\n          payload: error.toString()\n        })\n        return\n      }\n\n      // @ts-ignore: Ignore required to access discoveryServer.getServers() without arguments, and the argument isn't even used by the function\n      const {discoveryUrls, endpoints} = parseServerList(discoveryServer.getServers())\n\n      const outputMessage: DiscoveryMessage = {\n        ...msg,\n        payload: {\n          discoveryUrls,\n          endpoints\n        }\n      }\n      this.send(outputMessage)\n    })\n\n    this.on('close', function (done: () => void) {\n      self.removeAllListeners()\n\n      if (self.discoveryServer) {\n        self.discoveryServer.shutdown(function () {\n          coreDiscovery.internalDebugLog('shutdown')\n          done()\n        })\n      } else {\n        done()\n      }\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Discovery', OPCUAIIoTDiscovery)\n}\n"]}