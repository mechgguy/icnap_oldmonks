{"version":3,"sources":["../src/core/opcua-iiot-core-browser.ts"],"names":[],"mappings":"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","file":"opcua-iiot-core-browser.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n// SOURCE-MAP-REQUIRED\n\nimport {TodoTypeAny} from \"../types/placeholders\";\nimport {initCoreNode, isSessionBad, OBJECTS_ROOT, setNodeStatusTo} from \"./opcua-iiot-core\";\nimport {\n  BrowseDirection,\n  BrowseResult,\n  CacheNode,\n  ClientSession, ClientSessionBrowseService,\n  NodeCrawler,\n  NodeCrawlerBase,\n  NodeCrawlerClientSession,\n  UserData\n} from \"node-opcua\";\n\nimport debug from 'debug';\nimport {NodeStatus} from \"node-red\";\nimport {NodeMessageInFlow} from \"@node-red/registry\";\nimport {NodeIdLike} from \"node-opcua-nodeid\";\nimport {ResponseCallback} from \"node-opcua-client\";\nimport {DataValue} from \"node-opcua-data-value\";\nimport {ErrorCallback} from \"node-opcua-status-code\";\nimport {BrowseDescriptionLike} from \"node-opcua-client/source/client_session\";\nimport {isUndefined} from \"underscore\";\nimport {ReferenceDescription} from \"node-opcua-types/dist/_generated_opcua_types\";\nimport {AddressSpaceItem, Like} from \"../types/helpers\";\n\nconst internalDebugLog = debug('opcuaIIoT:browser') // eslint-disable-line no-use-before-define\nconst detailDebugLog = debug('opcuaIIoT:browser:details') // eslint-disable-line no-use-before-define\nconst crawlerInternalDebugLog = debug('opcuaIIoT:browser:crawler') // eslint-disable-line no-use-before-define\nconst crawlerDetailDebugLog = debug('opcuaIIoT:browser:crawler:details') // eslint-disable-line no-use-before-define\n\nexport type BrowserInputPayload = {\n  root: TodoTypeAny\n  actiontype: string\n  addressSpaceItems: AddressSpaceItem[]\n  addressItemsToBrowse: AddressSpaceItem[]\n  injectType: string,\n  manualInject: boolean\n}\n\nexport type BrowserInputPayloadLike = Like<BrowserInputPayload>\n\n\nconst browse = (session: ClientSessionBrowseService, nodeIdToBrowse: TodoTypeAny) => {\n  return new Promise<BrowseResult[]>(\n    function (resolve, reject) {\n      let browseOptions = [\n        {\n          nodeId: nodeIdToBrowse,\n          referenceTypeId: 'Organizes',\n          includeSubtypes: true,\n          browseDirection: BrowseDirection.Forward,\n          resultMask: 63\n        },\n        {\n          nodeId: nodeIdToBrowse,\n          referenceTypeId: 'Aggregates',\n          includeSubtypes: true,\n          browseDirection: BrowseDirection.Forward,\n          resultMask: 63\n        }\n      ]\n\n      session.browse(browseOptions, (err: Error | null, browseResult?: BrowseResult[]) => {\n        if (err) {\n          reject(err)\n        } else {\n          if (isUndefined(browseResult)) {\n            reject('Browse Results are Undefined')\n          } else {\n            resolve(browseResult)\n          }\n        }\n      })\n    }\n  )\n}\n\nconst browseAddressSpaceItems = function (session: ClientSessionBrowseService, addressSpaceItems: AddressSpaceItem[]) {\n  return new Promise<BrowseResult[]>(\n    function (resolve, reject) {\n      let browseOptions: BrowseDescriptionLike[] = []\n\n      addressSpaceItems.flatMap(function (item: TodoTypeAny) {\n        browseOptions.push({\n          nodeId: item.nodeId,\n          referenceTypeId: 'Organizes',\n          includeSubtypes: true,\n          browseDirection: BrowseDirection.Forward,\n          resultMask: 63\n        })\n\n        browseOptions.push({\n          nodeId: item.nodeId,\n          referenceTypeId: 'Aggregates',\n          includeSubtypes: true,\n          browseDirection: BrowseDirection.Forward,\n          resultMask: 63\n        })\n      })\n\n\n      if (browseOptions.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      session.browse(browseOptions, (err: Error | null, browseResult?: BrowseResult[]) => {\n        if (err) {\n          reject(err)\n        } else {\n          if (isUndefined(browseResult)) {\n            reject('Browse Results are Undefined')\n          } else {\n            resolve(browseResult)\n          }\n        }\n      })\n    }\n  )\n}\n\nconst createCrawler = function (session: NodeCrawlerClientSession) {\n  return new NodeCrawler(session)\n}\n\nconst crawl = (session: NodeCrawlerClientSession, nodeIdToCrawl: NodeIdLike, msg: BrowserInputPayloadLike, sendWrapper: (result: Error | TodoTypeAny) => void) => {\n  if (!nodeIdToCrawl) {\n    return new Error('NodeId To Crawl Not Valid')\n  }\n  const message = Object.assign({}, msg)\n  const crawler = createCrawler(session)\n  let crawlerResult: TodoTypeAny[] = []\n\n  const data = {\n    onBrowse: function (crawler: TodoTypeAny, cacheNode: TodoTypeAny) {\n      crawlerResult.push(cacheNode)\n      NodeCrawler.follow(crawler, cacheNode, this)\n    }\n  }\n  try {\n\n    const crawlback: ErrorCallback = (err) => {\n      if (err) {\n        sendWrapper(err)\n      } else {\n        sendWrapper({\n          crawlerResult,\n          rootNodeId: nodeIdToCrawl\n        })\n      }\n    }\n\n    const readCallback: ResponseCallback<DataValue[]> = (err, response) => {\n      if (err) {\n        sendWrapper(err)\n      } else if (response && response.some((res) => res.statusCode?.name === 'BadNodeIdUnknown')) {\n        sendWrapper(new Error('NodeId Not Valid: Please enter a valid NodeId, under the \"OPC UA Nodes\" tab of the Inject Node configuration.'))\n      } else {\n        crawler.crawl(nodeIdToCrawl, data, crawlback)\n      }\n    }\n\n    verifyNodeExists(session, nodeIdToCrawl, readCallback)\n\n  } catch (err) {\n    return err\n  }\n}\n\n/**\n * Crawl based on addressSpaceItems from an inject node.\n *\n * This seems needlessly overcomplicated, but that is necessary to avoid UnhandledPromiseRejection errors from the crawl function.\n *\n */\nconst crawlAddressSpaceItems = (session: NodeCrawlerClientSession, payload: TodoTypeAny, sendWrapper: (result: Error | TodoTypeAny) => void, timeout: number) => {\n  const crawler = createCrawler(session)\n\n  const crawlerPromises: TodoTypeAny = []\n  const resolvers: TodoTypeAny = []\n\n\n  payload.addressSpaceItems.forEach((item: TodoTypeAny, index: number) => {\n    if (!item.nodeId) {\n      coreBrowser.internalDebugLog('Item Not To Crawl - Missing NodeId')\n      return\n    }\n\n    // Each item should track results itself\n    // results will be combined in the payload.value field, but remain independent in payload.crawlerResult\n    let crawlerResult: TodoTypeAny[] = []\n    const data: UserData = {\n      onBrowse: (crawler: NodeCrawlerBase, cacheNode: CacheNode, userData: UserData) => {\n        if (!cacheNode) {\n          coreBrowser.internalDebugLog('Item Not To Crawl - Missing NodeId')\n        }\n        crawlerResult.push(cacheNode)\n        NodeCrawler.follow(crawler, cacheNode, userData)\n      }\n    }\n\n    /**\n     * Handle the response of the verifyNodeExists function.\n     * If the response doesn't contain any error, then the node exists and it can be crawled..\n     */\n    const readCallback: ResponseCallback<DataValue[]> = (err, response) => {\n      crawlerPromises.push(new Promise((resolve, reject) => {\n        resolvers.push({resolve, reject})\n        setTimeout(reject, timeout * 1000, new Error('Timeout'))\n      }).catch((test) => test))// The catch needs to be here, despite seeming useless\n\n      /**\n       * Resolves the promise of the current item.\n       * If the current item is the last, wait for all promises to resolve, then call the send function.\n       * Intended as a  callback for the crawl function, but also called directly, since this needs to be called every time.\n       */\n      const crawlback: ErrorCallback = (err) => {\n        resolvers[index].resolve(crawlerResult)\n        // Ensure only one message is sent\n        if (index === payload.addressSpaceItems.length - 1) {\n          Promise.allSettled(crawlerPromises).then((promiseList: TodoTypeAny) => {\n            sendWrapper({rootNodeId: item.nodeId, payload, crawlerResult: promiseList, promises: true})\n          }).catch((err) => {\n            sendWrapper(err)\n          })\n        }\n      }\n\n      // Crawlback must be called in every branch to ensure a message is sent\n      if (err) {\n        resolvers[index].reject(err)\n        crawlback(err)\n        return;\n      } else if (response && response.some((res) => res.statusCode?.name === 'BadNodeIdUnknown')) {\n        const error = new Error('NodeId Not Valid: Please enter a valid NodeId, under the \"OPC UA Nodes\" tab of the Inject Node configuration.')\n        resolvers[index].reject(error)\n        crawlback(error)\n        return;\n      }\n      crawler.crawl(item.nodeId, data, crawlback)\n    }\n\n    verifyNodeExists(session, item.nodeId, readCallback)\n\n  })\n}\n\nconst browseToRoot = function () {\n  detailDebugLog('Browse To Root ' + OBJECTS_ROOT)\n  return OBJECTS_ROOT\n}\n\nconst extractNodeIdFromTopic = function (payload: BrowserInputPayloadLike, node: TodoTypeAny) {\n  let rootNodeId = null\n\n  if (payload.actiontype === 'browse') { // event driven browsing\n    if (payload.root && payload.root.nodeId) {\n      internalDebugLog('Root Selected External ' + payload.root)\n      rootNodeId = payload.root.nodeId\n    } else {\n      rootNodeId = node.nodeId\n    }\n    detailDebugLog('Extracted NodeId ' + rootNodeId)\n\n    rootNodeId = rootNodeId || browseToRoot()\n  }\n\n  return rootNodeId\n}\n\nexport type Entry = {\n  referenceTypeId?: string,\n  isForward?: boolean,\n  nodeId?: string,\n  browseName?: string,\n  displayName?: string,\n  nodeClass?: string,\n  typeDefinition?: string,\n}\n\nconst transformToEntry = (reference: ReferenceDescription): Entry | ReferenceDescription => {\n  if (reference) {\n    try {\n      return reference.toJSON()\n    } catch (err) {\n      internalDebugLog(err)\n\n      if (reference.referenceTypeId) {\n        return {\n          referenceTypeId: reference.referenceTypeId.toString(),\n          isForward: reference.isForward,\n          nodeId: reference.nodeId.toString(),\n          browseName: reference.browseName.toString(),\n          displayName: reference.displayName.toString(),\n          nodeClass: reference.nodeClass.toString(),\n          typeDefinition: reference.typeDefinition.toString()\n        }\n      }\n    }\n  } else {\n    internalDebugLog('Empty Reference On Browse')\n  }\n  return reference\n}\n\nconst initBrowserNode = function () {\n  return {\n    browseTopic: OBJECTS_ROOT,\n    iiot: {\n      ...initCoreNode(),\n      items: [],\n      messageList: [],\n      delayMessageTimer: []\n    }\n  }\n}\n\nconst browseErrorHandling = function (\n  node: Node & TodoTypeAny,\n  err: Error,\n  msg: TodoTypeAny,\n  lists: TodoTypeAny,\n  errorHandler: (err: Error, msg: NodeMessageInFlow) => void,\n  statusHandler: (status: string | NodeStatus) => void,\n  oldStatusParameter: NodeStatus | undefined = undefined,\n  showErrors: boolean = true,\n  showStatusActivities: boolean = true,\n) {\n  let results = lists?.browserResults || []\n\n  if (err) {\n    internalDebugLog(typeof node + 'Error ' + err)\n    if (showErrors) {\n      errorHandler(err, msg)\n    }\n\n    if (isSessionBad(err)) {\n      node.emit('opcua_client_not_ready')\n    }\n  } else {\n    internalDebugLog(typeof node + ' Done With Error')\n    if (results.length) {\n      detailDebugLog(results.length + 'items in lists of browser results')\n    }\n  }\n\n  if (showStatusActivities && oldStatusParameter) {\n    node.oldStatusParameter = setNodeStatusTo(node, 'error', oldStatusParameter, showStatusActivities, statusHandler)\n  }\n}\n\n/**\n * Verifies that a node exists and catches the error, sending a nonexistent node to the crawler causes an error\n *\n * The endCallback function should do error checking and then call the crawl function\n */\nconst verifyNodeExists = (session: NodeCrawlerClientSession, nodeId: TodoTypeAny, endCallback: ResponseCallback<DataValue[]>) => {\n  session.read([{nodeId: nodeId}], endCallback)\n}\n\nconst coreBrowser = {\n  internalDebugLog,\n  detailDebugLog,\n  crawlerInternalDebugLog,\n  crawlerDetailDebugLog,\n\n  // Browser functions\n  browse,\n  browseAddressSpaceItems,\n  createCrawler,\n  crawl,\n  crawlAddressSpaceItems,\n  browseToRoot,\n  extractNodeIdFromTopic,\n  transformToEntry,\n  initBrowserNode,\n  browseErrorHandling,\n}\n\nexport default coreBrowser;\n"]}