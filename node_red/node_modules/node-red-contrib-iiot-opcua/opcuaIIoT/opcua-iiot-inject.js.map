{"version":3,"sources":["../src/opcua-iiot-inject.ts"],"names":[],"mappings":"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","file":"opcua-iiot-inject.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2013, 2016 IBM Corp. (node-red)\n All rights reserved.\n node-red-contrib-iiot-opcua\n **/\n'use strict'\nimport * as nodered from \"node-red\";\nimport {NodeMessageInFlow} from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport coreInject from \"./core/opcua-iiot-core-inject\";\nimport {resetIiotNode, IotOpcUaNodeMessage} from \"./core/opcua-iiot-core\";\nimport {CronJob} from 'cron';\nimport {AddressSpaceItem} from \"./types/helpers\";\n\ninterface OPCUAIIoTInject extends nodered.Node {\n  name: string\n  topic: string\n  payload: any\n  payloadType: TodoTypeAny\n  repeat: number\n  crontab: string\n  once: TodoTypeAny\n  startDelay: number\n  injectType: string\n  addressSpaceItems: Array<AddressSpaceItem>\n}\n\ninterface OPCUAIIoTInjectConfigurationDef extends nodered.NodeDef {\n  name: string\n  topic: string\n  payload: string\n  payloadType: string\n  repeat: number\n  crontab: string\n  once: boolean\n  startDelay: string\n  injectType: string\n  addressSpaceItems: Array<AddressSpaceItem>\n}\n\nexport interface InjectMessage extends NodeMessageInFlow {\n  payload: InjectPayload\n}\n\nexport interface InjectPayload extends IotOpcUaNodeMessage {\n  nodetype: 'inject' | string // Todo: fix typo to nodeType with version 5.x - first we need the cli tools working for version migrations\n}\n\n/**\n * Inject Node-RED node for OPC UA IIoT nodes.\n *\n * @param RED\n */\n\nmodule.exports = function (RED: nodered.NodeAPI) {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTInject(this: OPCUAIIoTInject, config: OPCUAIIoTInjectConfigurationDef) {\n    RED.nodes.createNode(this, config)\n\n    this.topic = config.topic\n    this.payload = config.payload\n    this.payloadType = config.payloadType\n    this.crontab = config.crontab\n    this.once = config.once\n    this.startDelay = parseFloat(config.startDelay) || 10\n    this.name = config.name\n    this.injectType = config.injectType || 'inject'\n    this.repeat = config.repeat || 0\n\n    this.addressSpaceItems = config.addressSpaceItems || []\n\n    let self: TodoTypeAny = this\n\n    let intervalId: NodeJS.Timer | null = null\n    let onceTimeout: NodeJS.Timeout | null = null\n    let cronjob: CronJob | null = null\n    const REPEAT_FACTOR = 1000.0\n    const ONE_SECOND = 1000\n    const INPUT_TIMEOUT_MILLISECONDS = 1000\n\n    const repeaterSetup = () => {\n      coreInject.internalDebugLog('Repeat Is ' + self.repeat)\n      coreInject.internalDebugLog('Crontab Is ' + self.crontab)\n      if (self.repeat !== 0) {\n        self.repeat = config.repeat * REPEAT_FACTOR\n\n        if (self.repeat === 0) {\n          self.repeat = ONE_SECOND\n        }\n\n        coreInject.internalDebugLog('Repeat Interval Start With ' + self.repeat + ' msec.')\n\n        // existing interval timer must be deleted\n        if (intervalId) {\n          clearInterval(intervalId)\n          intervalId = null\n        }\n\n        if (typeof self.repeat !== \"number\" || isNaN(self.repeat)) return;\n\n        intervalId = setInterval(() => {\n          this.emit('input', newMessage())\n        }, self.repeat)\n\n      } else if (self.crontab !== '') {\n        cronjob = new CronJob(self.crontab,\n          () => {\n            this.emit('input', newMessage())\n          },\n          null,\n          true)\n      }\n    }\n\n    const newMessage = function () {\n      return {\n        _msgid: RED.util.generateId(),\n        topic: self.topic,\n        payload: generateOutputValue(self.payload, {\n          _msgid: RED.util.generateId(),\n          payload: {\n            injectType: self.injectType }\n        })\n      }\n    }\n\n    // existing timers must be deleted\n    const resetAllTimer = function () {\n      if (onceTimeout) {\n        clearTimeout(onceTimeout)\n        onceTimeout = null\n      }\n\n      if (intervalId) {\n        clearInterval(intervalId)\n        intervalId = null\n      }\n    }\n\n    const generateOutputValue = (payloadType: string, inputMessage: NodeMessageInFlow) => {\n      switch (payloadType) {\n        case 'none':\n          return ''\n        case 'str':\n          return self.payload.toString()\n        case 'num':\n          return Number(self.payload)\n        case 'bool':\n          return (self.payload === true || self.payload === 'true')\n        case 'json':\n          return JSON.parse(self.payload)\n        case 'date':\n          return Date.now()\n        default:\n          if (self.payloadType === null) {\n            if (self.payload === '') {\n              return Date.now()\n            } else {\n              return self.payload\n            }\n          } else {\n            return RED.util.evaluateNodeProperty(self.payload, self.payloadType, this, inputMessage)\n          }\n      }\n    }\n\n    this.on('input', (msg: NodeMessageInFlow) => {\n      if (Object.keys(msg).length === 0) {\n        // security: never use a completely empty message with any key, this is not a valid node-red msg than\n        return;\n      }\n\n      try {\n        const topic = self.topic || msg.topic\n\n        const payload: InjectPayload = {\n          payload: msg.payload,\n          payloadType: self.payloadType,\n          value: generateOutputValue(self.payloadType, msg),\n          nodetype: 'inject',\n          injectType: (msg.payload as TodoTypeAny)?.injectType || self.injectType,\n          addressSpaceItems: [...self.addressSpaceItems],\n          manualInject: Object.keys(msg).length !== 0\n        }\n\n        const outputMessage: NodeMessageInFlow = {\n          ...msg,\n          topic,\n          payload,\n        }\n        this.send(outputMessage)\n      } catch (err) {\n        /* istanbul ignore next */\n        if (RED.settings.verbose) {\n          this.error(err, msg)\n        }\n      }\n    })\n\n    // existing timer must be deleted\n    if (onceTimeout) {\n      clearTimeout(onceTimeout)\n      onceTimeout = null\n    }\n\n    let timeout = INPUT_TIMEOUT_MILLISECONDS * self.startDelay\n\n    if (this.once) {\n      coreInject.detailDebugLog('injecting once at start delay timeout ' + timeout + ' msec.')\n      onceTimeout = setTimeout(  () => {\n        coreInject.detailDebugLog('injecting once at start')\n        this.emit('input', newMessage())\n        repeaterSetup()\n      }, timeout)\n    } else if (self.repeat || self.crontab) {\n      coreInject.detailDebugLog('start with delay timeout ' + timeout + ' msec.')\n      onceTimeout = setTimeout(function () {\n        coreInject.detailDebugLog('had a start delay of ' + timeout + ' msec. to setup inject interval')\n        repeaterSetup()\n      }, timeout)\n    } else {\n      repeaterSetup()\n    }\n\n    this.close = async (removed: boolean) => {\n      if (cronjob) {\n        cronjob.stop()\n        delete self['cronjob']\n      }\n\n      await resetAllTimer() // all timers have to be reset\n      self.removeAllListeners()\n      resetIiotNode(self)\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Inject', OPCUAIIoTInject)\n\n  RED.httpAdmin.post('/opcuaIIoT/inject/:id', RED.auth.needsPermission('opcuaIIoT.inject.write'), function (req, res) {\n    const node = RED.nodes.getNode(req.params.id)\n    if (node) {\n      try {\n        node.receive()\n        res.sendStatus(200)\n      } catch (err: any) {\n        /* istanbul ignore next */\n        res.sendStatus(500)\n        node.error(RED._('opcuaiiotinject.failed', {error: err.toString()}))\n      }\n    } else {\n      /* istanbul ignore next */\n      res.sendStatus(404)\n    }\n  })\n}\n"]}