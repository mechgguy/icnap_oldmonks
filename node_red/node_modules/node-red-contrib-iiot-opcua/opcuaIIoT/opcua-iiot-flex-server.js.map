{"version":3,"sources":["../src/opcua-iiot-flex-server.ts"],"names":[],"mappings":"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","file":"opcua-iiot-flex-server.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {NodeStatus} from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport coreServer from \"./core/opcua-iiot-core-server\";\nimport {resetIiotNode, setNodeStatusTo} from \"./core/opcua-iiot-core\";\nimport {VM} from \"vm2\";\nimport {logger} from \"./core/opcua-iiot-core-connector\";\nimport internalDebugLog = logger.internalDebugLog;\n\ntype OPCUAIIoTFlexServer = nodered.Node & {\n  on(event: 'shutdown', callback: () => void): void\n}\n\ninterface OPCUAIIoTFlexServerDef extends nodered.NodeDef {\n  addressSpaceScript: TodoTypeAny\n}\n\n/**\n * Server Node-RED node.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n  let scriptObjects = {}\n\n  function OPCUAIIoTFlexServer(this: OPCUAIIoTFlexServer, config: OPCUAIIoTFlexServerDef) {\n    RED.nodes.createNode(this, config)\n    coreServer.flexInternalDebugLog('Open Server Node')\n\n    let self: TodoTypeAny = this;\n\n    coreServer.readConfigOfServerNode(self, config)\n    coreServer.initServerNode(self)\n    coreServer.loadNodeSets(self, __dirname)\n    // node = coreServer.loadCertificates(node)\n    self.context = this.context\n\n    const vm = new VM({\n      allowAsync: false,\n      sandbox: {\n        // allow the node-opcua library to be accessed in user-submitted scripts as 'opcua'\n        opcua: require('node-opcua'),\n        node: self,\n        coreServer,\n        scriptObjects,\n        RED,\n        sandboxNodeContext: {\n          set: function () {\n            self.context().set.apply(self, arguments)\n          },\n          get: function () {\n            return self.context().get.apply(self, arguments)\n          },\n          keys: function () {\n            return self.context().keys.apply(self, arguments)\n          },\n          get global() {\n            return self.context().global\n          },\n          get flow() {\n            return self.context().flow\n          }\n        },\n        sandboxFlowContext: {\n          set: function () {\n            self.context().flow.set.apply(self, arguments)\n          },\n          get: function () {\n            return self.context().flow.get.apply(self, arguments)\n          },\n          keys: function () {\n            return self.context().flow.keys.apply(self, arguments)\n          }\n        },\n        sandboxGlobalContext: {\n          set: function () {\n            self.context().global.set.apply(self, arguments)\n          },\n          get: function () {\n            return self.context().global.get.apply(self, arguments)\n          },\n          keys: function () {\n            return self.context().global.keys.apply(self, arguments)\n          }\n        },\n        sandboxEnv: {\n          get: function (envVar: TodoTypeAny) {\n            let flow = self._flow\n            return flow.getSetting(envVar)\n          }\n        }\n      }\n    })\n\n    // Use the vm2 library to make the submitted script executable:\n    // vm.run returns construcAddressSpaceScript as a function\n    const constructAddressSpaceScript = vm.run('constructAddressSpaceScript = ' + config.addressSpaceScript)\n\n    const statusHandler = (status: string | NodeStatus): void => {\n      this.status(status)\n    }\n\n    const initNewServer = () => {\n      self = coreServer.initRegisterServerMethod(self)\n      let serverOptions = coreServer.buildGeneralServerOptions(self, 'Flex')\n      // serverOptions = coreServer.setDiscoveryOptions(node, serverOptions)\n      try {\n        coreServer.createServer(self, serverOptions, postInitialize, statusHandler, RED.settings.verbose)\n      } catch (err: any) {\n        /* istanbul ignore next */\n        this.emit('server_create_error')\n        coreServer.flexInternalDebugLog(err.message)\n        handleServerError(err, {payload: 'Flex Server Failure! Please, check the server settings!'})\n      }\n    }\n\n    const handleServerError = (err: Error, msg: TodoTypeAny) => {\n      coreServer.internalDebugLog(err)\n      if (self.showErrors) {\n        this.error(err, msg)\n      }\n    }\n\n    const postInitialize = () => {\n      self.iiot.eventObjects = {} // event objects should stay in memory\n      coreServer.constructAddressSpaceFromScript(self.iiot.opcuaServer, constructAddressSpaceScript, self.iiot.eventObjects)\n        .then(() => {\n          coreServer.start(self.iiot.opcuaServer, self).then(() => {\n            self.oldStatusParameter = setNodeStatusTo(self, 'active', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n            this.emit('server_running')\n          }).catch((err: Error) => {\n            /* istanbul ignore next */\n            this.emit('server_start_error')\n            self.oldStatusParameter = setNodeStatusTo(self, 'errors', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n            handleServerError(err, {payload: 'Server Start Failure'})\n          })\n        }).catch(function (err: Error) {\n        /* istanbul ignore next */\n        handleServerError(err, {payload: 'Server Address Space Failure'})\n      })\n    }\n\n    initNewServer()\n\n    this.on('input', function (msg: TodoTypeAny) {\n      if (!self.iiot.opcuaServer || !self.iiot.initialized) {\n        handleServerError(new Error('Server Not Ready For Inputs'), msg)\n        return\n      }\n\n      if (msg.payload.injectType === 'CMD') {\n        executeOpcuaCommand(msg)\n      } else {\n        handleServerError(new Error('Unknown Flex Inject Type ' + msg.payload.injectType), msg)\n      }\n    })\n\n    const executeOpcuaCommand = (msg: TodoTypeAny) => {\n      if (msg.payload.commandType === 'restart') {\n        restartServer()\n        this.send(msg)\n      } else {\n        handleServerError(new Error('Unknown Flex OPC UA Command'), msg)\n      }\n    }\n\n    const sendHandler = (msg: TodoTypeAny) => {\n      this.send(msg)\n    }\n\n    const emitHandler = (eventName: string | symbol, ...args: any[]) => {\n      this.emit(eventName, ...args)\n    }\n\n    const restartServer = function () {\n      coreServer.flexInternalDebugLog('Restart OPC UA Server')\n      coreServer.restartServer(self, statusHandler, emitHandler, sendHandler)\n\n      if (self.iiot.opcuaServer) {\n        coreServer.flexInternalDebugLog('OPC UA Server restarted')\n      } else {\n        coreServer.flexInternalDebugLog('Can not restart OPC UA Server')\n      }\n    }\n\n    this.on('close', function (done: () => void) {\n      self.removeAllListeners()\n\n      closeServer(() => {\n        coreServer.flexInternalDebugLog('Close Server Node')\n        resetIiotNode(self)\n        done()\n      })\n    })\n\n    this.on('shutdown', () => {\n      self.iiot.opcuaServer = null\n      initNewServer()\n    })\n\n    const closeServer = function (done: () => void) {\n      if (coreServer.simulatorInterval) {\n        clearInterval(coreServer.simulatorInterval)\n        coreServer.simulatorInterval = null\n      }\n\n      if (self.iiot.opcuaServer) {\n        self.iiot.opcuaServer.removeAllListeners()\n        self.iiot.opcuaServer.shutdown(self.delayToClose, done)\n      } else {\n        done()\n      }\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Flex-Server', OPCUAIIoTFlexServer)\n}\n"]}