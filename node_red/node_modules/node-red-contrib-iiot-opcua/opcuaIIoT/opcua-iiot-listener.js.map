{"version":3,"sources":["../src/opcua-iiot-listener.ts"],"names":[],"mappings":"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","file":"opcua-iiot-listener.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {NodeMessage, NodeStatus} from \"node-red\";\nimport {Node, NodeMessageInFlow} from \"@node-red/registry\";\nimport {TodoTypeAny, TodoVoidFunction} from \"./types/placeholders\";\nimport _ from 'underscore';\nimport coreListener from \"./core/opcua-iiot-core-listener\";\nimport {\n  buildNodeListFromClient,\n  buildNodesToListen,\n  checkConnectorState,\n  checkSessionNotValid,\n  deregisterToConnector, FsmListenerStates,\n  isInitializedIIoTNode,\n  isNodeId,\n  isSessionBad,\n  registerToConnector,\n  resetIiotNode,\n  setNodeStatusTo\n} from \"./core/opcua-iiot-core\";\nimport {\n  AttributeIds,\n  ClientMonitoredItem,\n  ClientSubscription,\n  ClientSubscriptionOptions,\n  DataValue,\n  StatusCodes\n} from \"node-opcua\";\n\nimport coreClient from \"./core/opcua-iiot-core-client\";\nimport {EventPayloadLike} from \"./opcua-iiot-event\";\nimport {isArray} from \"./types/assertion\";\n\ninterface OPCUAIIoTCMD extends nodered.Node {\n  action: string\n  queueSize: number\n  name: string\n  topic: string\n  justValue: string\n  useGroupItems: string\n  showStatusActivities: string\n  showErrors: string\n  connector: Node & TodoTypeAny\n}\n\ninterface OPCUAIIoTCMDDef extends nodered.NodeDef {\n  action: string\n  queueSize: number\n  name: string\n  topic: string\n  justValue: string\n  useGroupItems: string\n  showStatusActivities: string\n  showErrors: string\n  connector: string\n}\n\n\nexport type ListenPayload = TodoTypeAny &{\n  injectType: 'listen',\n  value: TodoTypeAny\n}\n\n\n/**\n * Listener Node-RED node.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTListener(this: OPCUAIIoTCMD, config: OPCUAIIoTCMDDef) {\n    RED.nodes.createNode(this, config)\n    this.action = config.action\n    this.queueSize = config.queueSize || 1\n    this.name = config.name\n    this.topic = config.topic\n    this.justValue = config.justValue\n    this.useGroupItems = config.useGroupItems\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let self: TodoTypeAny = this;\n\n    self.iiot = coreListener.initListenerNode()\n\n\n    /* #########   FSM EVENTS  #########     */\n\n    const fsmEventHandlerFunction = function (state: any) {\n      if(!state.changed) return\n\n      switch (state.value) {\n        case FsmListenerStates.StateStarted:\n\n          coreListener.detailDebugLog('Listener STARTED Event FSM')\n\n          switch (self.action) {\n            case 'subscribe':\n              while (self.iiot.messageQueue.length > 0) {\n                subscribeMonitoredItem(self.iiot.messageQueue.shift())\n              }\n              break\n            case 'events':\n              while (self.iiot.messageQueue.length > 0) {\n                subscribeMonitoredEvent(self.iiot.messageQueue.shift())\n              }\n              break\n            default:\n              coreListener.internalDebugLog('Unknown Action Type ' + self.action)\n          }\n          break\n        case FsmListenerStates.StateIdle:\n          coreListener.detailDebugLog('Listener IDLE Event FSM')\n          break\n        case FsmListenerStates.StateRequested:\n          coreListener.detailDebugLog('Listener REQUESTED Event FSM')\n          break\n        case FsmListenerStates.StateInit:\n          coreListener.detailDebugLog('Listener INIT Event FSM')\n          break\n        case FsmListenerStates.StateTerminated:\n          coreListener.detailDebugLog('Listener TERMINATED Event FSM')\n          break\n        case FsmListenerStates.StateError:\n          coreListener.detailDebugLog('Listener ERROR Event FSM')\n          break\n        case FsmListenerStates.StateEnd:\n          coreListener.detailDebugLog('Listener END Event FSM')\n          break\n        default:\n          coreListener.detailDebugLog('Listener NO VALID FSM EVENT')\n      }\n    }\n\n    self.iiot.stateMachine = coreListener.createListenerStateMachine()\n    self.iiot.stateService = coreListener.startListenerMachineService(self.iiot.stateMachine)\n    self.iiot.stateSubscription = coreListener.subscribeListenerFSMService(self.iiot.stateService, fsmEventHandlerFunction)\n    coreListener.internalDebugLog('Start FSM: ' + self.iiot.stateService.state.value)\n\n    const createSubscription = (msg: TodoTypeAny) => {\n\n      if (self.iiot.stateService.state.value !== FsmListenerStates.StateIdle) {\n        coreListener.internalDebugLog('New Subscription Request On State ' + self.iiot.stateService.state.value)\n        return\n      }\n\n      coreListener.internalDebugLog('Create Subscription On State ' + self.iiot.stateService.state.value)\n\n      if (self.iiot?.opcuaSubscription) {\n        self.iiot.opcuaSubscription = null\n      }\n\n      self.iiot.stateService.send('REQUESTINIT')\n\n      const timeMilliseconds = (typeof msg.payload.value === 'number') ? msg.payload.value : null\n      const dynamicOptions = (msg.payload.listenerParameters) ? msg.payload.listenerParameters.options : msg.payload.options\n      coreListener.internalDebugLog('create subscription, type: ' + self.action)\n      const options = dynamicOptions ||\n      self.action === 'events'\n        ? coreListener.getEventSubscriptionParameters(timeMilliseconds)\n        : coreListener.getSubscriptionParameters(timeMilliseconds);\n\n\n      makeSubscription(options)\n    }\n\n    const setSubscriptionEvents = (subscription: ClientSubscription) => {\n\n      subscription.on('started', () => {\n        coreListener.internalDebugLog('Subscription started')\n        self.oldStatusParameter = setNodeStatusTo(this, 'started', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n        self.iiot.monitoredItems.clear()\n        self.iiot.stateService.send('START')\n      })\n\n      subscription.on('terminated', () => {\n        coreListener.internalDebugLog('Subscription terminated')\n        self.oldStatusParameter = setNodeStatusTo(this, 'terminated', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n        self.iiot.stateService.send('TERMINATE')\n        self.iiot.stateService.send('IDLE')\n        resetSubscription()\n      })\n\n      subscription.on('internal_error', (err: Error) => {\n        coreListener.internalDebugLog('internal_error: ' + err.message)\n        if (self.showErrors) {\n          this.error(err, {payload: 'Internal Error'})\n        }\n        self.oldStatusParameter = setNodeStatusTo(this, 'error', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n        self.iiot.stateService.send('ERROR')\n        resetSubscription()\n      })\n\n      subscription.on('item_added', (monitoredItem: ClientMonitoredItem) => {\n        setMonitoring(monitoredItem)\n        updateSubscriptionStatus()\n      })\n    }\n\n    const makeSubscription = function (parameters: ClientSubscriptionOptions) {\n      if (checkSessionNotValid(self.connector.iiot.opcuaSession, 'ListenerSubscription')) {\n        return\n      }\n      if (!parameters) {\n        coreListener.internalDebugLog('Subscription Parameters Not Valid')\n        return\n      } else {\n        coreListener.internalDebugLog('Subscription Parameters: ' + JSON.stringify(parameters))\n      }\n      self.iiot.opcuaSubscription = ClientSubscription.create(self.connector.iiot.opcuaSession, parameters)\n      coreListener.internalDebugLog('New Subscription Created')\n\n      if (self.connector) {\n        self.iiot.hasOpcUaSubscriptions = true\n      }\n      setSubscriptionEvents(self.iiot.opcuaSubscription)\n      self.iiot.stateService.send('INIT')\n    }\n\n    const resetSubscription = function () {\n      sendAllMonitoredItems('SUBSCRIPTION TERMINATED')\n    }\n\n    const sendAllMonitoredItems = (payload: TodoTypeAny) => {\n      let addressSpaceItems: TodoTypeAny[] = []\n\n      self.iiot.monitoredASO.forEach(function (key: TodoTypeAny) {\n        addressSpaceItems.push({name: '', nodeId: key, datatypeName: ''})\n      })\n\n      this.send(({payload: payload, addressSpaceItems: addressSpaceItems} as TodoTypeAny))\n\n      self.iiot.monitoredItems.clear()\n      self.iiot.monitoredASO.clear()\n    }\n\n    const subscribeActionInput = function (msg: TodoTypeAny) {\n      if (self.iiot.stateService.state.value !== coreListener.RUNNING_STATE) {\n        self.iiot.messageQueue.push(msg)\n      } else {\n        subscribeMonitoredItem(msg)\n      }\n    }\n\n    const subscribeEventsInput = function (msg: TodoTypeAny) {\n      if (self.iiot.stateService.state.value !== coreListener.RUNNING_STATE) {\n        self.iiot.messageQueue.push(msg)\n      } else {\n        subscribeMonitoredEvent(msg)\n      }\n    }\n\n    const updateSubscriptionStatus = () => {\n      coreListener.internalDebugLog('listening' + ' (' + self.iiot.monitoredItems.size + ')')\n      self.oldStatusParameter = setNodeStatusTo(this, 'listening' + ' (' + self.iiot.monitoredItems.size + ')', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n    }\n\n    const handleMonitoringOfGroupedItems = (msg: TodoTypeAny) => {\n      if (self.iiot.monitoredItemGroup && self.iiot.monitoredItemGroup.groupId !== null) {\n        self.iiot.monitoredItemGroup.terminate(function (err: Error) {\n          if (err) {\n            coreListener.internalDebugLog('Monitoring Terminate Error')\n            coreListener.internalDebugLog(err)\n          }\n          self.iiot.monitoredItems.clear()\n          self.iiot.monitoredASO.clear()\n          self.iiot.monitoredItemGroup.groupId = null\n          updateSubscriptionStatus()\n        })\n      } else {\n        coreListener.buildNewMonitoredItemGroup(this, msg, msg.payload.addressSpaceItems, self.iiot.opcuaSubscription)\n          .then((result: TodoTypeAny) => {\n            if (!result.monitoredItemGroup) {\n              this.error(new Error('No Monitored Item Group In Result Of NodeOPCUA'))\n            } else {\n              result.monitoredItemGroup.groupId = _.uniqueId('group_')\n              self.iiot.monitoredItemGroup = result.monitoredItemGroup\n            }\n          }).catch((err: Error) => {\n          coreListener.subscribeDebugLog('Monitoring Build Item Group Error')\n          coreListener.subscribeDebugLog(err)\n          if (self.showErrors) {\n            this.error(err, msg)\n          }\n        })\n      }\n    }\n\n    const handleMonitoringOfItems = (msg: TodoTypeAny) => {\n      const itemsToMonitor = msg.payload.addressSpaceItems.filter((addressSpaceItem: TodoTypeAny) => {\n        const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n        return typeof self.iiot.monitoredASO.get(nodeIdToMonitor) === 'undefined'\n      })\n\n      const itemsToTerminate = msg.payload.addressSpaceItems.filter((addressSpaceItem: TodoTypeAny) => {\n        const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n        return typeof self.iiot.monitoredASO.get(nodeIdToMonitor) !== 'undefined'\n      })\n\n      if (itemsToMonitor.length > 0) {\n        const monitorMessage = Object.assign({}, msg)\n        monitorMessage.addressSpaceItems = itemsToMonitor\n        coreListener.subscribeDebugLog('itemsToMonitor ' + itemsToMonitor.length)\n        coreListener.monitorItems(this, monitorMessage, self.iiot.opcuaSubscription)\n      }\n\n      if (itemsToTerminate.length > 0) {\n        coreListener.subscribeDebugLog('itemsToTerminate ' + itemsToTerminate.length)\n        itemsToTerminate.forEach((addressSpaceItem: TodoTypeAny) => {\n          const nodeIdToMonitor = (typeof addressSpaceItem.nodeId === 'string') ? addressSpaceItem.nodeId : addressSpaceItem.nodeId.toString()\n          const item = self.iiot.monitoredASO.get(nodeIdToMonitor)\n          if (item && item.monitoredItem) {\n            coreListener.subscribeDebugLog('Monitored Item Unsubscribe ' + nodeIdToMonitor)\n            item.monitoredItem.terminate(function (err: Error) {\n              coreListener.subscribeDebugLog('Terminated Monitored Item ' + item.monitoredItem.itemToMonitor.nodeId)\n              monitoredItemTerminated(msg, item.monitoredItem, nodeIdToMonitor, err)\n            })\n          } else {\n            coreListener.subscribeDebugLog('Monitored Item Was Not Monitoring ' + nodeIdToMonitor)\n          }\n        })\n      }\n    }\n\n    const subscribeMonitoredItem = (msg: TodoTypeAny) => {\n      if (checkSessionNotValid(self?.connector?.iiot?.opcuaSession, 'MonitorListener')) {\n        return\n      }\n\n      if (!coreListener.checkState(this, msg, 'Monitoring')) {\n        return\n      }\n      if (!msg.payload.addressSpaceItems?.length) {\n        msg.payload.addressSpaceItems = msg.payload.browseResults\n      }\n      if (msg.payload.addressSpaceItems?.length) {\n        if (self.useGroupItems) {\n          handleMonitoringOfGroupedItems(msg)\n        } else {\n          handleMonitoringOfItems(msg)\n        }\n      } else {\n        self.oldStatusParameter = setNodeStatusTo(self, 'error', self.oldStatusParameter, true, statusHandler)\n        this.send({\n          ...msg,\n          payload: {\n            status: 'error',\n            message: 'No address space items to monitor'\n          }\n        })\n      }\n    }\n\n    const handleEventSubscriptions = (msg: TodoTypeAny) => {\n      msg.payload.addressSpaceItems.forEach((addressSpaceItem: TodoTypeAny) => {\n        if (!addressSpaceItem.nodeId) {\n          coreListener.eventDebugLog('Address Space Item Not Valid to Monitor Event Of ' + addressSpaceItem)\n          return\n        }\n\n        if (addressSpaceItem.datatypeName === 'ns=0;i=0') {\n          coreListener.subscribeDebugLog('Address Space Item Not Allowed to Monitor ' + addressSpaceItem)\n          return\n        }\n\n        let nodeIdToMonitor: string\n        if (typeof addressSpaceItem.nodeId === 'string') {\n          nodeIdToMonitor = addressSpaceItem.nodeId\n        } else {\n          nodeIdToMonitor = addressSpaceItem.nodeId.toString()\n        }\n\n        const item = self.iiot.monitoredASO.get(nodeIdToMonitor)\n\n        if (!item) {\n          coreListener.eventDebugLog('Register Event Item ' + nodeIdToMonitor)\n          coreListener.buildNewEventItem(nodeIdToMonitor, msg, self.iiot.opcuaSubscription)\n            .then(function (result: TodoTypeAny) {\n              if (result.monitoredItem.itemToMonitor.nodeId) {\n                coreListener.eventDebugLog('Event Item Registered ' + result.monitoredItem.itemToMonitor.nodeId + ' to ' + result.nodeId)\n                self.iiot.monitoredASO.set(result?.nodeId?.toString(), {\n                  monitoredItem: result.monitoredItem,\n                  topic: msg.topic || self.topic\n                })\n              }\n            }).catch((err: Error) => {\n            coreListener.eventDebugLog('Build Event Error')\n            coreListener.eventDebugLog(err)\n            if (self.showErrors) {\n              this.error(err, msg)\n            }\n          })\n        } else {\n          coreListener.eventDebugLog('Terminate Event Item' + nodeIdToMonitor)\n          const eventMessage = Object.assign({}, msg)\n          item.monitoredItem.terminate(function (err: Error) {\n            coreListener.eventDebugLog('Terminated Monitored Item ' + item.monitoredItem.itemToMonitor.nodeId)\n            monitoredItemTerminated(eventMessage, item.monitoredItem, nodeIdToMonitor, err)\n          })\n        }\n      })\n    }\n\n    const subscribeMonitoredEvent = (msg: TodoTypeAny) => {\n      if (checkSessionNotValid(self.connector.iiot.opcuaSession, 'EventListener')) {\n        return\n      }\n\n      if (!coreListener.checkState(this, msg, 'Event')) {\n        return\n      }\n\n      handleEventSubscriptions(msg)\n    }\n\n    const monitoredItemTerminated = (msg: any, monitoredItem: TodoTypeAny, nodeId: any, err: { message: string; }) => {\n      if (err) {\n        if (monitoredItem && monitoredItem.itemToMonitor.nodeId) {\n          coreListener.internalDebugLog(err.message + ' on ' + monitoredItem.itemToMonitor.nodeId)\n        } else {\n          coreListener.internalDebugLog(err.message + ' on monitoredItem')\n        }\n        if (self.showErrors) {\n          this.error(err, msg)\n        }\n      }\n      updateMonitoredItemLists(monitoredItem, nodeId)\n    }\n\n    const updateMonitoredItemLists = function (monitoredItem: TodoTypeAny, nodeId: any) {\n      coreListener.internalDebugLog('updateMonitoredItemLists = UMIL')\n\n      if (monitoredItem && monitoredItem.itemToMonitor) {\n        if (self.iiot.monitoredItems.has(monitoredItem?.itemToMonitor?.nodeId?.toString())) {\n          self.iiot.monitoredItems.delete(monitoredItem?.itemToMonitor?.nodeId?.toString())\n        }\n\n        if (isNodeId(monitoredItem.itemToMonitor.nodeId)) {\n          coreListener.internalDebugLog('UMIL Terminate Monitored Item ' + monitoredItem.itemToMonitor.nodeId)\n          if (self.iiot.monitoredASO.has(nodeId)) {\n            self.iiot.monitoredASO.delete(nodeId)\n          }\n        } else {\n          coreListener.internalDebugLog('UMIL monitoredItem NodeId is not valid Id:' + monitoredItem.itemToMonitor.nodeId)\n          self.iiot.monitoredASO.forEach(function (value: TodoTypeAny, key: TodoTypeAny, map: TodoTypeAny) {\n            coreListener.internalDebugLog('UMIL monitoredItem removing from ASO list key:' + key + ' value ' + value.monitoredItem.itemToMonitor.nodeId)\n            if (value.monitoredItem.itemToMonitor.nodeId && value.monitoredItem.itemToMonitor.nodeId === monitoredItem.itemToMonitor.nodeId) {\n              coreListener.internalDebugLog('UMIL monitoredItem removed from ASO list' + key)\n              map.delete(key)\n            }\n          })\n        }\n\n        updateSubscriptionStatus()\n      }\n    }\n\n    const setMonitoring = (monitoredItemToSet: ClientMonitoredItem) => {\n      const monitoredItem: ClientMonitoredItem = monitoredItemToSet\n      if (!monitoredItem || !monitoredItem.on) {\n        coreListener.internalDebugLog('monitoredItem Id from server is not valid Id: ' + monitoredItem)\n        return\n      }\n      if (!isNodeId(monitoredItem.itemToMonitor?.nodeId)) {\n        coreListener.internalDebugLog('monitoredItem NodeId is not valid Id:' + monitoredItem.itemToMonitor.nodeId)\n      }\n      coreListener.internalDebugLog('add monitoredItem to list Id:' + monitoredItem.itemToMonitor.nodeId + ' nodeId: ' + monitoredItem.itemToMonitor.nodeId)\n      self.iiot.monitoredItems.set(monitoredItem?.itemToMonitor?.nodeId?.toString(), monitoredItem)\n\n      monitoredItem.on('initialized', function () {\n        coreListener.internalDebugLog('monitoredItem ' + monitoredItem.itemToMonitor.nodeId + ' initialized on ' + monitoredItem.itemToMonitor.nodeId)\n      })\n\n      monitoredItem.on('changed', (dataValue: DataValue) => {\n        coreListener.detailDebugLog('data changed for item: ' + monitoredItem.itemToMonitor.nodeId + ' with Id ' + monitoredItem.itemToMonitor.nodeId)\n        if (!monitoredItem.monitoringParameters.filter) {\n          sendDataFromMonitoredItem(monitoredItem, dataValue)\n        } else {\n          sendDataFromEvent(monitoredItem, dataValue)\n        }\n      })\n\n      // @ts-ignore\n      monitoredItem.on('err', (err: Error) => {\n        const error = new Error(monitoredItem.itemToMonitor.nodeId.toString() + ': ' + (err?.message || err))\n        coreListener.internalDebugLog('monitoredItem Error: ' + error + ' on ' + monitoredItem.itemToMonitor.nodeId)\n        if (self.showErrors) {\n          this.error(error, ({payload: 'Monitored Item Error', monitoredItem: monitoredItem} as TodoTypeAny))\n        }\n\n        updateMonitoredItemLists(monitoredItem, monitoredItem.itemToMonitor.nodeId)\n\n        if (isSessionBad(error)) {\n          sendAllMonitoredItems('BAD SESSION')\n          terminateSubscription(() => {\n            this.emit('opcua_client_not_ready')\n          })\n        }\n      })\n\n      // @ts-ignore\n      monitoredItem.on('terminated', (err: TodoTypeAny) => {\n        monitoredItem.removeAllListeners()\n        coreListener.internalDebugLog('Terminated For ' + monitoredItem.itemToMonitor.nodeId)\n        updateMonitoredItemLists(monitoredItem, monitoredItem.itemToMonitor.nodeId)\n      })\n    }\n\n    const sendDataFromMonitoredItem = (monitoredItem: TodoTypeAny, dataValue: TodoTypeAny) => {\n      if (!monitoredItem) {\n        coreListener.internalDebugLog('Monitored Item Is Not Valid On Change Event While Monitoring')\n        return\n      }\n\n      const nodeId = (isNodeId(monitoredItem.itemToMonitor.nodeId)) ? monitoredItem?.itemToMonitor?.nodeId?.toString() : 'invalid'\n      const item = self.iiot.monitoredASO.get(nodeId)\n      const topic = (item) ? item.topic : self.topic\n\n      let msg: TodoTypeAny = {\n        payload: {\n          addressSpaceItems: [{name: '', nodeId, datatypeName: ''}],\n          nodeId,\n          nodetype: 'listen',\n          injectType: 'subscribe'\n        },\n        topic: topic,\n      }\n\n      coreListener.internalDebugLog('sendDataFromMonitoredItem: ' + msg.payload.addressSpaceItems[0].nodeId)\n\n      let dataValuesString: string\n      msg.justValue = self.justValue\n      if (self.justValue) {\n        dataValuesString = JSON.stringify(dataValue, null, 2)\n        try {\n          RED.util.setMessageProperty(msg.payload, 'value', JSON.parse(dataValuesString))\n        } catch (err: any) {\n          if (self.showErrors) {\n            this.warn('JSON not to parse from string for monitored item')\n            this.error(err, msg)\n          }\n\n          msg.payload.value = dataValuesString\n          msg.error = err.message\n        }\n      } else {\n        msg.payload = {\n          ... msg.payload,\n          value: dataValue,\n          statusCode: monitoredItem.statusCode,\n          itemToMonitor: monitoredItem.itemToMonitor,\n          monitoredItemId: monitoredItem.itemToMonitor\n        }\n      }\n\n      this.send(msg)\n    }\n\n    const handleEventResults = (msg: TodoTypeAny, dataValue: TodoTypeAny, eventResults: string, monitoredItem: TodoTypeAny) => {\n      coreListener.eventDetailDebugLog('Monitored Event Results ' + eventResults)\n\n      let dataValuesString: string\n      if (self.justValue) {\n        dataValuesString = JSON.stringify(dataValue, null, 2)\n        try {\n          RED.util.setMessageProperty(msg.payload, 'value', JSON.parse(dataValuesString))\n        } catch (err: any) {\n          if (self.showErrors) {\n            this.warn('JSON not to parse from string for monitored item')\n            this.error(err, msg)\n          }\n\n          msg.payload.value = dataValuesString\n          msg.error = err.message\n        }\n      } else {\n        msg.payload = {...msg.payload, value: dataValue, eventResults, monitoredItem}\n      }\n\n      this.send(msg)\n    }\n\n    const sendDataFromEvent = (monitoredItem: ClientMonitoredItem, dataValue: DataValue | DataValue[]) => {\n      // @ts-ignore\n      if (!isArray(dataValue)) {\n        dataValue = [dataValue]\n      }\n      if (!monitoredItem) {\n        coreListener.internalDebugLog('Monitored Item Is Not Valid On Change Event While Monitoring')\n        return\n      }\n\n      const nodeId = (isNodeId(monitoredItem.itemToMonitor.nodeId)) ? monitoredItem?.itemToMonitor?.nodeId?.toString() : 'invalid'\n      const item = self.iiot.monitoredASO.get(nodeId)\n      const topic = (item) ? item.topic : self.topic\n\n      let msg = {\n        payload: {\n          addressSpaceItems: [{name: '', nodeId: nodeId, datatypeName: ''}],\n          nodeId,\n          nodetype: 'listen',\n          injectType: 'event'\n        },\n        topic: topic || self.topic, // default if item.topic is empty\n      }\n\n      coreListener.analyzeEvent(self.connector.iiot.opcuaSession, getBrowseName, dataValue)\n        .then((eventResults: TodoTypeAny) => {\n          handleEventResults(msg, dataValue, eventResults, monitoredItem)\n        }).catch((err: Error) => {\n        (isInitializedIIoTNode(this)) ? errorHandling(err) : coreListener.internalDebugLog(err.message)\n      })\n    }\n\n    const errorHandling = (err: Error) => {\n      coreListener.internalDebugLog('Basic Error Handling')\n      coreListener.internalDebugLog(err)\n      if (self.showErrors) {\n        this.error(err, {payload: 'Error Handling'})\n      }\n\n      if (err) {\n        if (isSessionBad(err)) {\n          sendAllMonitoredItems('BAD SESSION')\n          terminateSubscription(() => {\n            this.emit('opcua_client_not_ready')\n          })\n        }\n      }\n    }\n\n    const getBrowseName = function (session: TodoTypeAny, nodeId: TodoTypeAny, callback: TodoVoidFunction) {\n      coreClient.read(session, [{\n        nodeId: nodeId,\n        attributeId: AttributeIds.BrowseName\n      }], 12, function (err: Error, org: TodoTypeAny, readValue: TodoTypeAny[]) {\n        if (!err) {\n          if (readValue[0].statusCode === StatusCodes.Good) {\n            let browseName = readValue[0].value.value.name\n            return callback(null, browseName)\n          }\n        }\n        callback(err, 'Unknown')\n      })\n    }\n\n    const handleListenerInput = (msg: TodoTypeAny) => {\n      switch (self.action) {\n        case 'subscribe':\n          subscribeMonitoredItem(msg)\n          break\n        case 'events':\n          subscribeMonitoredEvent(msg)\n          break\n        default:\n          this.error(new Error('Type Of Action To Listener Is Not Valid'), msg)\n      }\n    }\n\n    const errorHandler = (err: Error, msg: NodeMessage) => {\n      this.error(err, msg)\n    }\n\n    const emitHandler = (msg: string) => {\n      this.emit(msg)\n    }\n\n    const statusHandler = (status: string | NodeStatus): void => {\n      this.status(status)\n    }\n\n    this.on('input', (msg: NodeMessageInFlow) => {\n      if (!checkConnectorState(self, msg, 'Listener', errorHandler, emitHandler, statusHandler)) {\n        return\n      }\n      const payload = msg.payload as EventPayloadLike\n\n      const outputPayload = {\n        ...payload,\n        nodetype: payload.nodetype === 'browse' ? 'inject' : payload.nodetype,\n        injectType: payload.nodetype === 'browse' ? 'listen' : payload.injectType,\n        addressSpaceItems: buildNodeListFromClient(payload)\n      }\n\n      const outputMessage = {\n        ...msg,\n        payload: outputPayload\n      }\n\n      if (!outputPayload.addressSpaceItems || !outputPayload.addressSpaceItems.length) {\n        coreListener.subscribeDebugLog('Address-Space-Item Set Not Valid')\n        if (self.showErrors) {\n          this.error(new Error('Address-Space-Item Set Not Valid'), msg)\n        }\n        return\n      }\n\n      if (self.iiot.stateService.state.value === FsmListenerStates.StateIdle) {\n        self.iiot.messageQueue.push(outputMessage)\n        createSubscription(outputMessage)\n      } else {\n        if (!coreListener.checkState(self, outputMessage, 'Input')) {\n          self.iiot.messageQueue.push(outputMessage)\n          return\n        }\n        handleListenerInput(outputMessage)\n      }\n    })\n\n    const onAlias = (event: string, callback: () => void) => {\n      // @ts-ignore\n      this.on(event, callback)\n    }\n\n    registerToConnector(this, statusHandler, onAlias, errorHandler)\n\n    if (self.connector) {\n      self.connector.on('connector_init', () => {\n        coreListener.internalDebugLog('Reset Subscription On Connector Init')\n        if (self.iiot?.opcuaSubscription) {\n          self.iiot.opcuaSubscription = null\n        }\n\n        self.iiot.monitoredItems = new Map()\n        self.iiot.monitoredASO = new Map()\n        self.iiot.stateMachine = coreListener.createListenerStateMachine()\n        self.iiot.monitoredItemGroup = null\n      })\n\n      self.connector.on('connection_stopped', () => {\n        terminateSubscription(() => {\n          if (self.iiot?.opcuaSubscription)\n            self.iiot.opcuaSubscription = null\n          coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection stopped')\n        })\n      })\n\n      self.connector.on('connection_end', () => {\n        terminateSubscription(() => {\n          if (self.iiot?.opcuaSubscription) {\n            self.iiot.opcuaSubscription = null\n          }\n          coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection ends')\n        })\n      })\n\n      self.connector.on('connection_reconfigure', () => {\n        terminateSubscription(() => {\n          if (self.iiot?.opcuaSubscription) {\n            self.iiot.opcuaSubscription = null\n          }\n          coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection reconfigure')\n        })\n      })\n\n      self.connector.on('connection_renew', () => {\n        terminateSubscription(() => {\n          if (self.iiot?.opcuaSubscription) {\n            self.iiot.opcuaSubscription = null\n          }\n          coreListener.internalDebugLog('Subscription Was Terminated On Connector Event -> connection renew')\n        })\n      })\n    }\n\n    const terminateSubscription = function (done: () => void) {\n      if (self.iiot?.opcuaSubscription && self.iiot?.stateService.state.value === coreListener.RUNNING_STATE) {\n        self.iiot.stateService.send('TERMINATE')\n        self.iiot.opcuaSubscription.terminate(() => {\n          self.iiot.opcuaSubscription.removeAllListeners()\n          self.iiot.stateService.send('IDLE')\n          done()\n        })\n      } else {\n        self.iiot.stateService.send('IDLE')\n        done()\n      }\n    }\n\n    if (process.env.TEST === 'true') {\n      self.functions = {\n        createSubscription,\n        subscribeActionInput,\n        subscribeMonitoredItem,\n        monitoredItemTerminated,\n        errorHandling,\n        setMonitoring\n      }\n    }\n\n    this.on('close', (done: () => void) => {\n      coreListener.internalDebugLog('Close Listener Node - start with terminate of the OPC UA subscription')\n      self.removeAllListeners()\n\n      terminateSubscription(() => {\n\n        if (self.iiot?.opcuaSubscription) {\n          self.iiot.opcuaSubscription = null\n        }\n\n        coreListener.internalDebugLog('Close Listener Node - start with signal to deregister in the connector')\n        deregisterToConnector(self, () => {\n          resetIiotNode(self)\n          done()\n          coreListener.internalDebugLog('Close of Listener Node done')\n        })\n\n        coreListener.internalDebugLog('Close Listener Node')\n      })\n    })\n\n/*\n    self.iiot.stateMachine.onIDLE = function () {\n      coreListener.detailDebugLog('Listener IDLE Event FSM')\n    }\n\n    self.iiot.stateMachine.onREQUESTED = function () {\n      coreListener.detailDebugLog('Listener REQUESTED Event FSM')\n    }\n\n    self.iiot.stateMachine.onINIT = function () {\n      coreListener.detailDebugLog('Listener INIT Event FSM')\n    }\n\n    self.iiot.stateMachine.onSTARTED = function () {\n      coreListener.detailDebugLog('Listener STARTED Event FSM')\n\n      switch (self.action) {\n        case 'subscribe':\n          while (self.iiot.messageQueue.length > 0) {\n            subscribeMonitoredItem(self.iiot.messageQueue.shift())\n          }\n          break\n        case 'events':\n          while (self.iiot.messageQueue.length > 0) {\n            subscribeMonitoredEvent(self.iiot.messageQueue.shift())\n          }\n          break\n        default:\n          coreListener.internalDebugLog('Unknown Action Type ' + self.action)\n      }\n    }\n\n    self.iiot.stateMachine.onTERMINATED = function () {\n      coreListener.detailDebugLog('Listener TERMINATED Event FSM')\n    }\n\n    self.iiot.stateMachine.onERROR = function () {\n      coreListener.detailDebugLog('Listener ERROR Event FSM')\n    }\n\n    self.iiot.stateMachine.onEND = function () {\n      coreListener.detailDebugLog('Listener END Event FSM')\n    }\n    */\n  }\n\n\n\n  RED.nodes.registerType('OPCUA-IIoT-Listener', OPCUAIIoTListener)\n}\n"]}