{"version":3,"sources":["../src/opcua-iiot-server-cmd.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AACH,YAAY,CAAA;;AAKZ,gFAAwD;AACxD,4DAAqD;AACrD,IAAO,gBAAgB,GAAG,kCAAM,CAAC,gBAAgB,CAAC;AAelD;;;;GAIG;AAEH,MAAM,CAAC,OAAO,GAAG,CAAC,GAAoB,EAAE,EAAE;IACxC,sBAAsB;IAEtB,SAAS,YAAY,CAAqB,MAAuB;QAC/D,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QAClC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAA;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAA;QAC3B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAA;QAEvB,IAAI,IAAI,GAAG,IAAI,CAAA;QAEf,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAoC,EAAE,EAAE;YACxD,IAAI,aAAa,GAAgB,EAAE,CAAC;YAEpC,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAA;YACjC,aAAa,CAAC,UAAU,GAAG,KAAK,CAAA;YAChC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAA;YAE5C,IAAI,GAAG,CAAC,OAAO,CAAC,iBAAiB,IAAI,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7E,IAAI,gBAAgB,CAAA;gBACpB,KAAK,gBAAgB,IAAI,GAAG,CAAC,OAAO,CAAC,iBAAiB,EAAE;oBACtD,aAAa,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAA;iBAC/C;gBACD,IAAI,aAAa,CAAC,MAAM,EAAE;oBACxB,IAAI,CAAC,IAAI,iCACJ,GAAG,KACN,OAAO,EAAE,aAAa,IACtB,CAAA;iBACH;aACF;iBAAM;gBACL,IAAI,IAAI,CAAC,MAAM,EAAE;oBACf,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;iBACnC;gBACD,IAAI,CAAC,IAAI,iCAAK,GAAG,KAAE,OAAO,EAAE,aAAa,IAAE,CAAA;aAC5C;QACH,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE;YACpC,gBAAgB,CAAC,gBAAgB,CAAC,CAAA;YAClC,IAAA,+BAAa,EAAC,IAAI,CAAC,CAAA;YACnB,IAAI,EAAE,CAAA;QACR,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,2BAA2B,EAAE,YAAY,CAAC,CAAA;AACnE,CAAC,CAAA","file":"opcua-iiot-server-cmd.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {NodeMessageInFlow} from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport {logger} from \"./core/opcua-iiot-core-connector\";\nimport {resetIiotNode} from \"./core/opcua-iiot-core\";\nimport internalDebugLog = logger.internalDebugLog;\n\ninterface OPCUAIIoTCMD extends nodered.Node {\n  commandtype: string\n  nodeId: string\n  name: string\n\n}\n\ninterface OPCUAIIoTCMDDef extends nodered.NodeDef {\n  commandtype: string\n  nodeId: string\n  name: string\n}\n\n/**\n * Address space object Node-RED node.\n *\n * @param RED\n */\n\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTCMD(this: OPCUAIIoTCMD, config: OPCUAIIoTCMDDef) {\n    RED.nodes.createNode(this, config)\n    this.commandtype = config.commandtype\n    this.nodeId = config.nodeId\n    this.name = config.name\n\n    let self = this\n\n    this.on('input', (msg: NodeMessageInFlow | TodoTypeAny) => {\n      let returnPayload: TodoTypeAny = {};\n\n      returnPayload.nodetype = 'inject'\n      returnPayload.injectType = 'CMD'\n      returnPayload.commandType = self.commandtype\n\n      if (msg.payload.addressSpaceItems && msg.payload.addressSpaceItems.length > 0) {\n        let addressSpaceItem\n        for (addressSpaceItem of msg.payload.addressSpaceItems) {\n          returnPayload.nodeId = addressSpaceItem.nodeId\n        }\n        if (returnPayload.nodeId) {\n          this.send({\n            ...msg,\n            payload: returnPayload\n          })\n        }\n      } else {\n        if (self.nodeId) {\n          returnPayload.nodeId = self.nodeId\n        }\n        this.send({...msg, payload: returnPayload})\n      }\n    })\n\n    this.on('close', (done: () => void) => {\n      internalDebugLog('Close CMD Node')\n      resetIiotNode(self)\n      done()\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server-Command', OPCUAIIoTCMD)\n}\n"]}