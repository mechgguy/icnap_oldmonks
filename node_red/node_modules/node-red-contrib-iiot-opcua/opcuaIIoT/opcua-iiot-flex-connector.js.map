{"version":3,"sources":["../src/opcua-iiot-flex-connector.ts"],"names":[],"mappings":"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","file":"opcua-iiot-flex-connector.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\nimport * as nodered from \"node-red\";\nimport {NodeMessage, NodeStatus} from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport coreConnector from \"./core/opcua-iiot-core-connector\";\nimport {deregisterToConnector, registerToConnector, resetIiotNode} from \"./core/opcua-iiot-core\";\nimport {NodeMessageInFlow} from \"@node-red/registry\";\n\nexport interface OPCUAIIoTFlexConnector extends nodered.Node {\n  showStatusActivities: boolean\n  showErrors: boolean\n  connector: any\n  iiot?: TodoTypeAny\n}\n\ninterface OPCUAIIoTFlexConnectorConfigurationDef extends nodered.NodeDef {\n  showStatusActivities: boolean\n  showErrors: boolean\n  connector: any\n}\n\n/**\n * Event Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED: nodered.NodeAPI) {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTFlexConnector(this: OPCUAIIoTFlexConnector, config: OPCUAIIoTFlexConnectorConfigurationDef) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let self = this;\n    self.iiot = {}\n\n    this.status({fill: 'blue', shape: 'ring', text: 'new'})\n\n    this.on('input', (msg: NodeMessageInFlow) => {\n      coreConnector.internalDebugLog('connector change request input')\n\n      const payload: TodoTypeAny = msg.payload\n\n      if (self.connector) {\n        if (payload.endpoint && payload.endpoint.includes('opc.tcp:')) {\n          coreConnector.internalDebugLog('connector change possible')\n          coreConnector.internalDebugLog(payload)\n          self.connector.functions.restartWithNewSettings(payload, () => {\n            coreConnector.internalDebugLog('connector change injected')\n            this.send(msg)\n          })\n        } else {\n          coreConnector.internalDebugLog('Connector Change Not Possible - Wrong Endpoint')\n          this.error(new Error('Connector Change Not Possible - Wrong Endpoint'), msg)\n        }\n      } else {\n        coreConnector.internalDebugLog('Connector Change Not Possible - No Connector')\n        this.error(new Error('Connector Change Not Possible - No Connector'), msg)\n      }\n    })\n\n    const statusHandler = (status: string | NodeStatus) => {\n      this.status(status)\n    }\n\n    const errorHandler = (err: Error, msg: NodeMessage) => {\n      this.error(err, msg)\n    }\n\n    const onAlias = (event: string, callback: () => void) => {\n      // @ts-ignore\n      this.on(event, callback)\n    }\n\n    registerToConnector(this, statusHandler, onAlias, errorHandler)\n\n    this.on('close', (done: () => void) => {\n      self.removeAllListeners()\n\n      deregisterToConnector(this as TodoTypeAny, () => {\n        resetIiotNode(this)\n        done()\n      })\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Flex-Connector', OPCUAIIoTFlexConnector)\n}\n"]}