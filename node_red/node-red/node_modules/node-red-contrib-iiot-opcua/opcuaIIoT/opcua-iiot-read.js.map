{"version":3,"sources":["../src/opcua-iiot-read.ts"],"names":[],"mappings":"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","file":"opcua-iiot-read.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport {Node, NodeAPI, NodeDef, NodeMessage, NodeMessageInFlow, NodeStatus} from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport {ClientSession} from \"node-opcua\";\nimport coreClient from \"./core/opcua-iiot-core-client\";\nimport {\n  buildNodesToRead,\n  checkConnectorState,\n  checkSessionNotValid, deregisterToConnector,\n  initCoreNode,\n  isInitializedIIoTNode,\n  isSessionBad, registerToConnector,\n  resetIiotNode\n} from \"./core/opcua-iiot-core\";\nimport {ReadValueIdOptions} from \"node-opcua-service-read\";\nimport {NodeIdLike} from \"node-opcua-nodeid\";\n\ninterface OPCUAIIoTRead extends Node {\n  attributeId: number\n  maxAge: number\n  depth: number\n  name: string\n  justValue: string\n  showStatusActivities: string\n  showErrors: string\n  parseStrings: string\n  historyDays: number\n  connector: Node\n}\n\ninterface OPCUAIIoTReadDef extends NodeDef {\n  attributeId: string\n  maxAge: string\n  depth: string\n  name: string\n  justValue: string\n  showStatusActivities: string\n  showErrors: string\n  parseStrings: string\n  historyDays: string\n  connector: string\n}\n\nexport type ReadPayload = TodoTypeAny & {\n  nodetype: 'read'\n}\n\n/**\n * Read Node-RED node.\n *\n * @param RED\n */\nmodule.exports = (RED: NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTRead(this: OPCUAIIoTRead, config: OPCUAIIoTReadDef) {\n    RED.nodes.createNode(this, config)\n    this.attributeId = parseInt(config.attributeId) || 0\n    this.maxAge = parseInt(config.maxAge) || 1\n    this.depth = parseInt(config.depth) || 1\n    this.name = config.name\n    this.justValue = config.justValue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.parseStrings = config.parseStrings\n    this.historyDays = parseInt(config.historyDays) || 1\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let self: TodoTypeAny = this;\n    self.iiot = initCoreNode()\n\n    const handleReadError = (err: Error, msg: NodeMessage) => {\n      coreClient.readDebugLog(err)\n      if (self.showErrors) {\n        this.error(err, msg)\n      }\n\n      if (isSessionBad(err)) {\n        this.emit('opcua_client_not_ready')\n      }\n    }\n\n    if (process.env.TEST === \"true\")\n      self.functions = {\n        handleReadError\n      }\n\n    const readAllFromNodeId = (session: ClientSession | TodoTypeAny, itemsToRead: TodoTypeAny[], msg: TodoTypeAny) => {\n      coreClient.readAllAttributes(session, itemsToRead, msg)\n        .then((readResult: TodoTypeAny) => {\n          try {\n            this.send(buildResultMessage('AllAttributes', readResult))\n          } catch (err) {\n            /* istanbul ignore next */\n            self.iiot.handleReadError(err, readResult.msg)\n          }\n        }).catch(function (err: Error) {\n        /* istanbul ignore next */\n        (isInitializedIIoTNode(self)) ? handleReadError(err, msg) : coreClient.internalDebugLog(err.message)\n      })\n    }\n\n    const readValueFromNodeId = (session: ClientSession | TodoTypeAny, itemsToRead: TodoTypeAny[], msg: TodoTypeAny) => {\n      coreClient.readVariableValue(session, itemsToRead, msg)\n        .then((readResult: TodoTypeAny) => {\n          let message = buildResultMessage('VariableValue', readResult)\n          this.send(message)\n        }).catch(function (err: Error) {\n        /* istanbul ignore next */\n        (isInitializedIIoTNode(self)) ? handleReadError(err, msg) : coreClient.internalDebugLog(err.message)\n      })\n    }\n\n    const readHistoryDataFromNodeId = (session: ClientSession | TodoTypeAny, itemsToRead: TodoTypeAny[], msg: TodoTypeAny) => {\n      const startDate = new Date()\n      self.iiot.historyStart = new Date()\n      self.iiot.historyStart.setDate(startDate.getDate() - self.historyDays)\n      self.iiot.historyEnd = new Date()\n\n      coreClient.readHistoryValue(\n        session,\n        itemsToRead,\n        msg.payload.historyStart || self.iiot.historyStart,\n        msg.payload.historyEnd || self.iiot.historyEnd,\n        msg)\n        .then((readResult: TodoTypeAny) => {\n          let message = buildResultMessage('HistoryValue', readResult)\n          message.payload.historyStart = readResult.startDate || self.iiot.historyStart\n          message.payload.historyEnd = readResult.endDate || self.iiot.historyEnd\n          this.send(message)\n        }).catch((err: Error) => {\n        /* istanbul ignore next */\n        (isInitializedIIoTNode(self)) ? handleReadError(err, msg) : coreClient.internalDebugLog(err.message)\n      })\n    }\n\n    const readFromNodeId = (session: ClientSession | TodoTypeAny, itemsToRead: TodoTypeAny[], msg: TodoTypeAny) => {\n\n      const transformItem = (item: NodeIdLike): ReadValueIdOptions => {\n        return {\n          nodeId: item,\n          attributeId: Number(self.attributeId) || undefined\n        }\n      }\n\n      const transformedItemsToRead = itemsToRead.map(transformItem)\n\n\n      coreClient.read(session, transformedItemsToRead, msg.payload.maxAge || self.maxAge, msg)\n        .then((readResult: TodoTypeAny) => {\n          let message = buildResultMessage('Default', readResult)\n          message.payload.maxAge = self.maxAge\n          this.send(message)\n        }).catch(function (err: Error) {\n        /* istanbul ignore next */\n        (isInitializedIIoTNode(self)) ? handleReadError(err, msg) : coreClient.internalDebugLog(err.message)\n      })\n    }\n\n    const readFromSession = (session: ClientSession | TodoTypeAny, itemsToRead: TodoTypeAny, originMsg: TodoTypeAny) => {\n      let msg = Object.assign({}, originMsg)\n      if (checkSessionNotValid(session, 'Reader')) {\n        return\n      }\n\n      coreClient.readDebugLog('Read With AttributeId ' + self.attributeId)\n      switch (parseInt(self.attributeId)) {\n        case coreClient.READ_TYPE.ALL:\n          readAllFromNodeId(session, itemsToRead, msg)\n          break\n        case coreClient.READ_TYPE.VALUE:\n          readValueFromNodeId(session, itemsToRead, msg)\n          break\n        case coreClient.READ_TYPE.HISTORY:\n          readHistoryDataFromNodeId(session, itemsToRead, msg)\n          break\n        default:\n          readFromNodeId(session, itemsToRead, msg)\n      }\n    }\n\n    const buildResultMessage = function (readType: TodoTypeAny, readResult: TodoTypeAny) {\n      let payload = {\n        ...readResult.msg.payload,\n        nodetype: 'read',\n        readtype: readType,\n        attributeId: self.attributeId,\n        justValue: self.justValue,\n        payloadType: 'read'\n      }\n\n      let dataValuesString = extractDataValueString(readResult)\n\n      payload = setMessageProperties(payload, readResult, dataValuesString)\n\n      if (!self.justValue) {\n        payload = enhanceMessage(payload, readResult)\n      }\n\n      let message: NodeMessage = {\n        ...readResult.msg,\n        payload\n      }\n\n      return message as TodoTypeAny\n    }\n\n    const extractDataValueString = function (readResult: TodoTypeAny) {\n      let dataValuesString\n      if (self.justValue) {\n        dataValuesString = JSON.stringify(readResult.results, null, 2)\n      } else {\n        dataValuesString = JSON.stringify(readResult, null, 2)\n      }\n      return dataValuesString\n    }\n\n    const setMessageProperties = (payload: TodoTypeAny, readResult: TodoTypeAny, stringValue: TodoTypeAny) => {\n      try {\n        RED.util.setMessageProperty(payload, 'value', JSON.parse(stringValue))\n      } /* istanbul ignore next */ catch (err: any) {\n        if (self.showErrors) {\n          this.warn('JSON not to parse from string for dataValues type ' + JSON.stringify(readResult, null, 2))\n          this.error(err, readResult.msg)\n        }\n\n        payload.value = stringValue\n        payload.error = err.message\n      }\n      return payload\n    }\n\n    const enhanceMessage = (payload: TodoTypeAny, readResult: TodoTypeAny) => {\n      try {\n        payload.resultsConverted = {}\n        let dataValuesString = JSON.stringify(readResult.results, null, 2)\n        RED.util.setMessageProperty(payload, 'resultsConverted', JSON.parse(dataValuesString))\n      } /* istanbul ignore next */ catch (err: any) {\n        if (self.showErrors) {\n          this.warn('JSON not to parse from string for dataValues type ' + readResult.results)\n          this.error(err, readResult.msg)\n        }\n\n        payload.resultsConverted = null\n        payload.error = err.message\n      }\n      return payload\n    }\n\n    const errorHandler = (err: Error, msg: NodeMessage) => {\n      this.error(err, msg)\n    }\n\n    const emitHandler = (msg: string) => {\n      this.emit(msg)\n    }\n\n    const statusHandler = (status: string | NodeStatus) => {\n      this.status(status)\n    }\n\n    this.on('input', function (msg: NodeMessageInFlow, send: (msg: NodeMessage | Array<NodeMessage | NodeMessage[] | null>) => void, done: () => void) {\n      if (!checkConnectorState(self, msg, 'Read', errorHandler, emitHandler, statusHandler)) {\n        return\n      }\n\n      try {\n        readFromSession(self.connector.iiot.opcuaSession, buildNodesToRead(msg.payload), msg)\n      } /* istanbul ignore next */ catch (err: any) {\n        handleReadError(err, msg)\n      }\n    })\n\n    const onAlias = (event: string, callback: () => void) => {\n      // @ts-ignore\n      this.on(event, callback)\n\n    }\n\n    registerToConnector(self, statusHandler, onAlias, errorHandler)\n\n    this.on('close', (done: () => void) => {\n      self.removeAllListeners()\n\n      deregisterToConnector(self, () => {\n        resetIiotNode(self)\n        done()\n      })\n    })\n\n    if (process.env.isTest === 'TRUE') {\n      self.iiot = {\n        ...self.iiot,\n        handleReadError,\n      }\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Read', OPCUAIIoTRead)\n}\n"]}