{"version":3,"sources":["../src/opcua-iiot-result-filter.ts"],"names":[],"mappings":"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","file":"opcua-iiot-result-filter.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport coreFilter from './core/opcua-iiot-core-filter';\nimport {convertDataValueByDataType, filterListByNodeId, filterListEntryByNodeId} from \"./core/opcua-iiot-core\";\nimport {NodeMessageInFlow} from \"@node-red/registry\";\nimport {BrowserPayload} from \"./opcua-iiot-browser\";\nimport {BrowseResult, StatusCodes} from \"node-opcua\";\nimport {isArray} from \"./types/assertion\";\nimport {ReadPayload} from \"./opcua-iiot-read\";\nimport {ListenPayload} from \"./opcua-iiot-listener\";\nimport {WritePayload} from \"./opcua-iiot-write\";\nimport {AnyPayload} from \"./types/payloads\";\n\ninterface OPCUAIIoTResultFilter extends nodered.Node {\n  nodeId: string\n  datatype: string\n  fixedValue: string\n  fixPoint: number\n  withPrecision: string\n  precision: number\n  entry: number\n  justValue: string\n  withValueCheck: string\n  minvalue: string\n  maxvalue: string\n  defaultvalue: string\n  topic: string\n  name: string\n  showErrors: boolean\n}\n\ninterface OPCUAIIoTResultFilterDef extends nodered.NodeDef {\n  nodeId: string\n  datatype: string\n  fixedValue: string\n  fixPoint: string\n  withPrecision: string\n  precision: string\n  entry: number\n  justValue: string\n  withValueCheck: string\n  minvalue: string\n  maxvalue: string\n  defaultvalue: string\n  topic: string\n  name: string\n  showErrors: boolean\n}\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n  const _ = require('underscore')\n\n  function OPCUAIIoTResultFilter(this: OPCUAIIoTResultFilter, config: OPCUAIIoTResultFilterDef) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.datatype = config.datatype\n    this.fixedValue = config.fixedValue\n    this.fixPoint = parseInt(config.fixPoint) | 2\n    this.withPrecision = config.withPrecision\n    this.precision = parseInt(config.precision) | 2\n    this.entry = config.entry || 1\n    this.justValue = config.justValue\n    this.withValueCheck = config.withValueCheck\n    this.minvalue = config.minvalue\n    this.maxvalue = config.maxvalue\n    this.defaultvalue = config.defaultvalue\n    this.topic = config.topic\n    this.name = config.name\n    this.showErrors = config.showErrors\n\n    let self: TodoTypeAny = this\n    self.iiot = {};\n\n    this.status({fill: 'blue', shape: 'ring', text: 'new'})\n\n    type FilterInputPayload = {\n      statusCodes: StatusCodes[]\n      nodesToWrite: TodoTypeAny[]\n      nodetype: string\n      value: any\n      browserResults?: BrowseResult[]\n      crawlerResults?: BrowseResult[]\n      msg: TodoTypeAny\n    }\n\n    const isNodeIdNotToFindInAddressSpaceItems = function (msg: any) {\n      if (msg.payload.addressSpaceItems) {\n        let filteredNodeIds = _.filter(msg.payload.addressSpaceItems, function (entry: any) {\n          return entry.nodeId === self.nodeId\n        })\n        return filteredNodeIds.length < 1;\n      } else {\n        return true\n      }\n    }\n\n    const messageIsToFilter = function (msg: any) {\n      return isNodeIdNotToFindInAddressSpaceItems(msg)\n    }\n\n    this.on('input', (msg: NodeMessageInFlow) => {\n      if (!msg.hasOwnProperty('payload') || msg.payload === null || msg.payload === void 0) { // values with false has to be true\n        coreFilter.internalDebugLog('filtering message without payload')\n        return\n      }\n      /*\n      if (messageIsToFilter(msg)) {\n        coreFilter.internalDebugLog('filtering message on filter')\n        return\n      }\n      */\n      const payload = msg.payload as FilterInputPayload & BrowserPayload\n      const filtered = filterByType(payload)\n      const value =\n        self.justValue\n          // if justValue, return the filtered value of the input message\n          // Spread operator placement should handle all formats of filtered objects\n          ? filterResult({value: filtered, ...filtered, nodetype: payload.nodetype})\n          // otherwise return the value field of the payload\n          // The field considered 'value' is different for crawler and browsers\n          : (filtered.value || filtered.crawlerResults || filtered.browserResults)\n\n      const convertedValue = (this.fixedValue || this.withPrecision) ? convertAllResults(payload, value) : value;\n\n      const {msg: msgKey, ...restPayload} = payload;\n      const outputPayload = {\n        ...restPayload,\n        filtertype: \"filter\",\n        justValue: self.justValue,\n        nodeId: self.nodeId,\n        ...filtered,\n        value: convertedValue.length === 1 ? convertedValue[0] : convertedValue,\n        filter: true,\n      }\n\n      const outputMessage = {\n        payload: outputPayload,\n        _msgid: msg._msgid,\n        topic: self.topic || msg.topic\n      }\n\n      this.send(outputMessage)\n    })\n\n    const filterByType = (payload: AnyPayload) => {\n      let result = null\n      switch (payload.nodetype) {\n        case 'read':\n          result = filterByReadType(payload)\n          break\n        case 'write':\n          result = filterByWriteType(payload)\n          break\n        case 'listen':\n          result = filterByListenType(payload)\n          break\n        case 'browse':\n          result = filterByBrowserType(payload)\n          break\n        case 'crawl':\n          result = filterByCrawlerType(payload)\n          break\n        default:\n          coreFilter.internalDebugLog('unknown node type injected to filter for ' + payload.nodetype)\n          if (self.showErrors) {\n            this.error(new Error('unknown node type injected to filter for ' + payload.nodetype), {payload: payload})\n          }\n      }\n      return result\n    }\n\n    const convertAllResults = (payload: FilterInputPayload, result: TodoTypeAny | TodoTypeAny[]) => {\n      if (!Array.isArray(result)) {\n        return convertResult(payload, result)\n      } else {\n        return result.map((item) => {\n          if ('value' in item) {\n            return convertResult(payload, item.value || item)\n          } else {\n            return item\n          }\n        })\n      }\n    }\n\n    const convertResult = (payload: FilterInputPayload, result: TodoTypeAny) => {\n      if (result.value) result = result.value\n      try {\n        let convertedResult = null\n        if (self.fixPoint >= 0 && self.fixedValue) {\n          convertedResult = Number.parseFloat(result).toFixed(self.fixPoint)\n          convertedResult = parseFloat(convertedResult)\n        }\n\n        if (self.precision >= 0 && self.withPrecision) {\n          convertedResult = Number.parseFloat(result).toPrecision(self.precision)\n          convertedResult = parseFloat(convertedResult)\n        }\n\n        if (convertedResult === null) {\n          convertedResult = result\n        }\n        if (self.withValueCheck && typeof convertedResult === \"number\") {\n          if (convertedResult < self.minvalue || convertedResult > self.maxvalue) {\n            convertedResult = self.defaultvalue\n          }\n        }\n        return convertedResult\n      } catch (err: any) {\n        coreFilter.internalDebugLog('result converting error ' + err.message)\n        if (self.showErrors) {\n          this.error(err, {payload})\n        }\n        return result\n      }\n    }\n\n    const convertResultValue = (payload: FilterInputPayload) => {\n      let result = payload.value\n      if (result === null || result === void 0) {\n        coreFilter.internalDebugLog('result null or undefined')\n        if (self.showErrors) {\n          this.error(new Error('converted result null or undefined'), {payload})\n        }\n        return result\n      }\n\n      if (result.hasOwnProperty('value')) {\n        result = result.value\n      }\n\n      if (!self.datatype) {\n        coreFilter.internalDebugLog('data type unknown - set the data type inside the result filter node')\n        return result\n      }\n\n      result = convertDataType(result)\n      if (result === null || result === void 0) {\n        coreFilter.internalDebugLog('data type result null or undefined')\n        if (self.showErrors) {\n          this.error(new Error('converted by data type result null or undefined'), {payload})\n        }\n      } else {\n        result = convertResult(payload, result)\n      }\n      return result\n    }\n\n    const filterResult = function (payload: FilterInputPayload) {\n      if (payload.nodetype === 'read' || payload.nodetype === 'listen') {\n        return convertResultValue(payload)\n      } else if (payload.nodetype === 'browse' || payload.nodetype === 'crawl') {\n        return (payload as TodoTypeAny).crawlerResults || payload.browserResults\n      }\n      return payload.value\n    }\n\n    const extractValueFromOPCUAArrayStructure = function (payloadInput: TodoTypeAny, entryIndex: number) {\n      let result = null\n      let payload = payloadInput[entryIndex]\n\n      if (!payload) {\n        return result\n      }\n\n      if (payload.hasOwnProperty('value')) {\n        if (payload.value.hasOwnProperty('value')) {\n          result = payload.value.value\n        } else {\n          result = payload.value\n        }\n      } else {\n        result = payload\n      }\n\n      return result\n    }\n\n    const extractValueFromOPCUAStructure = function (payload: TodoTypeAny) {\n      let result\n\n      if (payload.hasOwnProperty('value')) {\n        if (payload.value.hasOwnProperty('value')) {\n          result = payload.value.value\n        } else {\n          result = payload.value\n        }\n      }\n\n      return result\n    }\n\n    const filterByReadType = (payload: ReadPayload) => {\n      const value = payload.value;\n\n      if (Array.isArray(value))\n        return {\n          value: value.filter((item) => {\n            return item.nodeId.toString().includes(this.nodeId)\n          })\n        }\n      else {\n        this.error('wrong payload type');\n        return payload\n      }\n    }\n\n    const filterByWriteType = function (payload: WritePayload) {\n      return {\n        value: payload.nodesToWrite.map((item) => {\n          while (item.value) {\n            item = item.value\n          }\n          return item;\n        })\n      }\n    }\n\n    const filterByListenType = function (payload: ListenPayload) {\n      let result\n\n      if (payload && payload.hasOwnProperty('value')) {\n        result = payload.value\n      } else {\n        result = payload\n      }\n\n      if (result && result.hasOwnProperty('value')) {\n        result = result.value\n      }\n\n      return result\n    }\n\n    const filterByBrowserType = (payload: BrowserPayload & TodoTypeAny) => {\n      const browserResults = filterListByNodeId(self.nodeId, payload.browserResults)\n\n      const addressSpaceItems = (payload.addressSpaceItems && payload.addressSpaceItems.length) ?\n        filterListByNodeId(self.nodeId, payload.addressSpaceItems) : [];\n\n      const nodesToRead = (payload.nodesToRead && payload.nodesToRead.length) ?\n        filterListEntryByNodeId(self.nodeId, payload.nodesToRead) : [];\n      const nodesToReadCount = (payload.nodesToRead && payload.nodesToRead.length) ?\n        nodesToRead.length : 0;\n\n      const addressItemsToRead = (payload.addressItemsToRead && payload.addressItemsToRead.length) ?\n        filterListByNodeId(self.nodeId, payload.addressItemsToRead) : []\n      const addressItemsToReadCount = (payload.addressItemsToRead && payload.addressItemsToRead.length) ?\n        addressItemsToRead.length : 0\n\n      const addressItemsToBrowse = (payload.addressItemsToBrowse && payload.addressItemsToBrowse.length) ?\n        filterListByNodeId(self.nodeId, payload.addressItemsToBrowse) : []\n      const addressItemsToBrowseCount = (payload.addressItemsToBrowse && payload.addressItemsToBrowse.length) ?\n        addressItemsToBrowse.length : 0\n\n      return {\n        browserResults,\n        addressSpaceItems,\n        nodesToRead,\n        nodesToReadCount,\n        addressItemsToRead,\n        addressItemsToReadCount,\n        addressItemsToBrowse,\n        addressItemsToBrowseCount,\n      }\n    }\n\n    const filterByCrawlerType = function (msg: TodoTypeAny) {\n      const crawlerResults = filterListByNodeId(self.nodeId, msg.crawlerResults)\n\n      const addressItems = (msg.addressSpaceItems && msg.addressSpaceItems.length) ?\n        filterListByNodeId(self.nodeId, msg.addressSpaceItems) : []\n\n      return {\n        crawlerResults,\n        addressItems,\n      }\n    }\n\n    const convertDataType = function (result: TodoTypeAny) {\n      coreFilter.internalDebugLog('data type convert for ' + self.nodeId)\n      return convertDataValueByDataType(result, self.datatype)\n    }\n\n    if (self.withValueCheck) {\n      self.minvalue = convertDataType(self.minvalue)\n      self.maxvalue = convertDataType(self.maxvalue)\n    }\n\n    this.status({fill: 'green', shape: 'dot', text: 'active'})\n\n    if (process.env.TEST === \"true\")\n      self.functions = {\n        convertResultValue\n      }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Result-Filter', OPCUAIIoTResultFilter)\n}\n"]}