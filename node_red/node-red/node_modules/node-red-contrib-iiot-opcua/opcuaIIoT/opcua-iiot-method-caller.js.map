{"version":3,"sources":["../src/opcua-iiot-method-caller.ts"],"names":[],"mappings":"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","file":"opcua-iiot-method-caller.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {Node} from \"@node-red/registry\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport coreMethod from \"./core/opcua-iiot-core-method\";\nimport {\n  checkConnectorState, checkSessionNotValid,\n  deregisterToConnector,\n  initCoreNode, isInitializedIIoTNode,\n  isSessionBad,\n  registerToConnector, resetIiotNode\n} from \"./core/opcua-iiot-core\";\nimport {NodeMessage, NodeStatus} from \"node-red\";\n\ninterface OPCUAIIoTMethodCaller extends nodered.Node {\n  objectId: string\n  methodId: string\n  methodType: string\n  value: string\n  justValue: string\n  name: string\n  showStatusActivities: string\n  showErrors: string\n  inputArguments: string\n  connector: Node\n}\n\ninterface OPCUAIIoTMethodCallerDef extends nodered.NodeDef {\n  objectId: string\n  methodId: string\n  methodType: string\n  value: string\n  justValue: string\n  name: string\n  showStatusActivities: string\n  showErrors: string\n  inputArguments: string\n  connector: string\n}\n\nexport type MethodPayload = TodoTypeAny & {\n  nodetype: 'method'\n}\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT method call.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTMethodCaller(this: OPCUAIIoTMethodCaller, config: OPCUAIIoTMethodCallerDef) {\n    RED.nodes.createNode(this, config)\n    this.objectId = config.objectId\n    this.methodId = config.methodId\n    this.methodType = config.methodType\n    this.value = config.value\n    this.justValue = config.justValue\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.inputArguments = config.inputArguments\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let self: TodoTypeAny = this\n    self.iiot = initCoreNode()\n\n    const handleMethodError = (err: Error, msg: TodoTypeAny) => {\n      coreMethod.internalDebugLog(err)\n      if (self.showErrors) {\n        this.error(err, msg)\n      }\n\n      if (isSessionBad(err)) {\n        this.emit('opcua_client_not_ready')\n      }\n    }\n\n    const handleMethodWarn = (message: TodoTypeAny) => {\n      if (self.showErrors) {\n        this.warn(message)\n      }\n\n      coreMethod.internalDebugLog(message)\n    }\n\n    const callMethodOnSession = (session: TodoTypeAny, msg: TodoTypeAny) => {\n      if (checkSessionNotValid(session, 'MethodCaller')) {\n        return\n      }\n\n      if (msg.payload.methodId && msg.payload.inputArguments) {\n        coreMethod.getArgumentDefinition(self.connector.iiot.opcuaSession, msg).then(function (results: TodoTypeAny) {\n          coreMethod.detailDebugLog('Call Argument Definition Results: ' + JSON.stringify(results))\n          callMethod(msg, results)\n        }).catch((err: Error) => {\n          isInitializedIIoTNode(self) ? handleMethodError(err, msg) : coreMethod.internalDebugLog(err.message)\n        })\n      } else {\n        coreMethod.internalDebugLog(new Error('No Method Id And/Or Parameters'))\n      }\n    }\n\n    const getDataValue = (message: TodoTypeAny, result: TodoTypeAny, definitionResults: TodoTypeAny) => {\n      if (self.justValue) {\n        if (message.payload.inputArguments) {\n          delete message.payload['inputArguments']\n        }\n        return null\n      } else {\n        return {\n          result,\n          definition: definitionResults\n        }\n      }\n    }\n\n    const callMethod = (msg: TodoTypeAny, definitionResults: TodoTypeAny) => {\n      coreMethod.callMethods(self.connector.iiot.opcuaSession, msg).then((data: TodoTypeAny) => {\n        coreMethod.detailDebugLog('Methods Call Results: ' + JSON.stringify(data))\n\n        let result = null\n        let outputArguments = []\n        let message = Object.assign({}, data.msg)\n        message.payload.nodetype = 'method'\n        message.payload.methodType = data.msg.payload.methodType\n\n        for (result of data.results) {\n          outputArguments.push({statusCode: result.statusCode, outputArguments: result.outputArguments})\n        }\n\n        message.payload.results = data.results\n        message.payload.definition = definitionResults\n\n        message.payload.value = getDataValue(message, data.results, definitionResults) || outputArguments\n        // TODO: we have to check this again what value is to be ...\n        /* ?.map((item: TodoTypeAny) => {\n          if (item.statusCode) {\n            return {\n              ...item,\n              statusCode: {\n                value: item.statusCode._value,\n                description: item.statusCode._description,\n                name: item.statusCode._name,\n              }\n            }\n          }\n          return item\n        })*/\n        message.payload.outputArguments = outputArguments;\n\n        this.send(message)\n      }).catch((err: Error) => {\n        coreMethod.internalDebugLog(err)\n        if (self.showErrors) {\n          this.error(err, msg)\n        }\n      })\n    }\n\n    const errorHandler = (err: Error, msg: NodeMessage) => {\n      this.error(err, msg)\n    }\n\n    const emitHandler = (msg: string) => {\n      this.emit(msg)\n    }\n\n    const statusHandler = (status: string | NodeStatus) => {\n      this.status(status)\n    }\n\n    this.on('input', function (msg: TodoTypeAny) {\n      if (!checkConnectorState(self, msg, 'MethodCaller', errorHandler, emitHandler, statusHandler)) {\n        return\n      }\n\n      const message = coreMethod.buildCallMessage(self, msg)\n      if (coreMethod.invalidMessage(self, message, handleMethodWarn)) {\n        return\n      }\n      callMethodOnSession(self.connector.iiot.opcuaSession, message)\n    })\n\n    const onAlias = (event: string, callback: (...args: any) => void) => {\n      // @ts-ignore\n      this.on(event, callback)\n    }\n\n    registerToConnector(self as TodoTypeAny, statusHandler, onAlias, errorHandler)\n\n    this.on('close', (done: () => void) => {\n      deregisterToConnector(self as TodoTypeAny, () => {\n        resetIiotNode(self)\n        done()\n      })\n    })\n\n    if (process.env.TEST === \"true\")\n      self.functions = {\n        handleMethodError,\n        handleMethodWarn,\n        callMethodOnSession\n      }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Method-Caller', OPCUAIIoTMethodCaller)\n}\n"]}