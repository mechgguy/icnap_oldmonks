{"version":3,"sources":["../src/opcua-iiot-crawler.ts"],"names":[],"mappings":"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","file":"opcua-iiot-crawler.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport {NodeMessageInFlow} from \"@node-red/registry\";\nimport {\n  checkCrawlerItemIsNotToFilter,\n  checkItemForUnsetState,\n  checkSessionNotValid,\n  deregisterToConnector,\n  FAKTOR_SEC_TO_MSEC,\n  registerToConnector,\n  resetIiotNode,\n  setNodeStatusTo\n} from \"./core/opcua-iiot-core\";\nimport coreBrowser, {BrowserInputPayloadLike} from \"./core/opcua-iiot-core-browser\";\nimport {Node, NodeAPI, NodeDef, NodeMessage, NodeStatus} from \"node-red\";\nimport {NodeCrawlerClientSession} from \"node-opcua-client-crawler/source/node_crawler_base\";\nimport {InjectPayload} from \"./opcua-iiot-inject\";\nimport {DataValue} from \"node-opcua\";\nimport {CompressedBrowseResult} from \"./core/opcua-iiot-core-response\";\nimport {isArray} from \"./types/assertion\";\n\ninterface OPCUAIIoTCrawler extends nodered.Node {\n  name: string\n  justValue: TodoTypeAny\n  singleResult: TodoTypeAny\n  showStatusActivities: boolean\n  showErrors: boolean\n  activateUnsetFilter: TodoTypeAny\n  activateFilters: TodoTypeAny\n  negateFilter: TodoTypeAny\n  filters: Filter[]\n  delayPerMessage: number\n  timeout: number\n  connector: Node\n}\n\ninterface OPCUAIIoTCrawlerDef extends nodered.NodeDef {\n  name: string\n  justValue: TodoTypeAny\n  singleResult: TodoTypeAny\n  showStatusActivities: boolean\n  showErrors: boolean\n  activateUnsetFilter: TodoTypeAny\n  activateFilters: TodoTypeAny\n  negateFilter: TodoTypeAny\n  filters: Filter[]\n  delayPerMessage: number\n  timeout: number\n  connector: string\n}\n\ntype Filter = {\n  name: string\n  value: string\n}\n\ntype CrawlerMessage = NodeMessageInFlow & {\n  payload: CrawlerPayload\n}\n\nexport interface CrawlerPayload extends Omit<InjectPayload, 'nodetype'> {\n  crawlerResults: (CrawlerResult[] | Error)[] | CrawlerResult[]\n  browseTopic?: string\n  crawlerResultsCount?: number\n  endpoint?: string\n  session?: string\n  nodetype?: 'crawl'\n  resultsConverted?: string\n  error?: string\n  value: CrawlerResult[] | CompressedBrowseResult[]\n}\n\nexport type CrawlerResult = {\n  nodeId: string\n  nodeClass: number\n  typeDefinition: string\n  browseName: {\n    name: string\n    namespaceIndex: number\n  }\n  displayName: {\n    locale: string\n    text: string\n  }\n  description: {\n    locale?: string\n    text?: string\n  }\n  dataType?: string\n  dataValue?: DataValue\n  valueRank?: number\n  minimumSamplingInterval?: number\n  accessLevel?: number\n  userAccessLevel?: number\n} & CrawlerParent\n\ntype CrawlerParent = {\n  parent?: CrawlerResult\n  referenceToParent?: CrawlerResult\n}\n\n\n/**\n * Crawler Node-RED nodeConfig.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTCrawler(this: OPCUAIIoTCrawler & TodoTypeAny, config: OPCUAIIoTCrawlerDef) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.justValue = config.justValue\n    this.singleResult = config.singleResult\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.activateUnsetFilter = config.activateUnsetFilter\n    this.activateFilters = config.activateFilters\n    this.negateFilter = config.negateFilter\n    this.filters = config.filters\n    this.delayPerMessage = config.delayPerMessage || 0.2\n    this.timeout = config.timeout || 30\n\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let self: TodoTypeAny = this;\n    const {iiot, browseTopic} = coreBrowser.initBrowserNode();\n    self.browseTopic = browseTopic;\n    self.iiot = iiot;\n\n    self.iiot.delayMessageTimer = []\n\n    const filterCrawlerResults = function (crawlerResultToFilter: TodoTypeAny[]) {\n      let crawlerResult = crawlerResultToFilter || []\n      let filteredEntries: TodoTypeAny[] = []\n      if (self.activateFilters && self.filters && self.filters.length > 0) {\n        crawlerResult.forEach(function (item) {\n          if (itemIsNotToFilter(item)) {\n            filteredEntries.push(item)\n          }\n        })\n        crawlerResult = filteredEntries\n      }\n\n      if (self.justValue) {\n        crawlerResult.forEach(function (item) {\n          if (item.references) {\n            delete item['references']\n          }\n        })\n      }\n\n      return crawlerResult\n    }\n\n    const itemIsNotToFilter = function (item: TodoTypeAny) {\n      let result = checkItemForUnsetState(self, item)\n\n      if (result) {\n        result = self.filters.every((element: TodoTypeAny) => {\n          return checkCrawlerItemIsNotToFilter(self, item, element, result) !== 0\n        }) ? 1 : 0\n      }\n      return (self.negateFilter) ? !result : result\n    }\n\n    const crawl = async (session: TodoTypeAny, payload: BrowserInputPayloadLike, statusHandler: (status: string | NodeStatus) => void) => {\n      if (checkSessionNotValid(self.connector.iiot.opcuaSession, 'Crawler')) {\n        return\n      }\n\n      coreBrowser.internalDebugLog('Browse Topic To Call Crawler ' + self.browseTopic)\n\n      if (self.showStatusActivities && self.oldStatusParameter) {\n        self.oldStatusParameter = setNodeStatusTo(self, 'crawling', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n      }\n      coreBrowser.crawl(session, self.browseTopic, payload, getSendWrapper(payload))\n\n    }\n\n    const callError = (err: Error, msg: NodeMessageInFlow) => {\n      this.error(err, msg)\n    }\n    const statusHandler = (status: string | NodeStatus) => {\n      this.status(status)\n    }\n\n    const crawlForSingleResult = function (session: NodeCrawlerClientSession, payload: BrowserInputPayloadLike) {\n      coreBrowser.crawlAddressSpaceItems(session, payload, getSendWrapper(payload), self.timeout)\n    }\n\n    type PromiseResult = {\n      status: string,\n      value: Error | TodoTypeAny\n    }\n\n    const handleResultArray = (results: PromiseResult[], payload: TodoTypeAny) => {\n      // map each result 1-to-1 input to output\n      const crawlerResult = results.map(function (result) {\n        if (result.value instanceof Error) {\n          return result.value.toString()\n        } else {\n          return filterCrawlerResults(result.value)\n        }\n      })\n\n      // combine the valid results into payload.value\n      const value = crawlerResult.filter((result) => {\n        return !(typeof result === 'string')\n      }).flatMap((result) => {\n        return result\n      })\n\n      // list errors in payload.error\n      const error = results.filter((result) => {\n        return (result.value instanceof Error)\n      }).map((result) => {\n        return result.value\n      })\n\n      if (error.length > 0) {\n        payload.error = error\n      }\n      payload.value = value\n\n      sendMessage(payload, crawlerResult)\n    }\n\n    /**\n     * Returns a sendWrapper function with the correct payload context\n     */\n    const getSendWrapper = (payload: BrowserInputPayloadLike) => {\n      return (result: Error | TodoTypeAny) => {\n        if (result.promises) {\n          handleResultArray(result.crawlerResult, payload)\n        } else if (result instanceof Error) {\n          coreBrowser.browseErrorHandling(self, result, payload, undefined, callError, statusHandler, self.oldStatusParameter, self.showErrors, self.showStatusActivities)\n        } else {\n          coreBrowser.internalDebugLog(result.rootNodeId + ' Crawler Results ' + result.crawlerResult.length);\n          const filteredResults = filterCrawlerResults(result.crawlerResult);\n          (payload as TodoTypeAny).value = [filteredResults]\n          sendMessage(payload as FlatMessage<CrawlerPayload>, filteredResults)\n        }\n      }\n    }\n\n    const crawlForResults = function (session: NodeCrawlerClientSession, payload: BrowserInputPayloadLike) {\n      payload.addressSpaceItems?.forEach((entry) => {\n        coreBrowser.crawl(session, entry.nodeId, payload, getSendWrapper(payload))\n      })\n    }\n\n    const crawlNodeList = function (session: NodeCrawlerClientSession, payload: BrowserInputPayloadLike) {\n      if (self.showStatusActivities && self.oldStatusParameter) {\n        self.oldStatusParameter = setNodeStatusTo(self, 'crawling', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n      }\n      if (self.singleResult) {\n        crawlForSingleResult(session, payload)\n      } else {\n        crawlForResults(session, payload)\n      }\n    }\n\n    interface FlatMessage<T extends object> extends CrawlerPayload {\n      _msgid: string,\n      topic: string,\n    }\n\n    const sendMessage = (payload: FlatMessage<CrawlerPayload>, crawlerResult: TodoTypeAny) => {\n      const {\n        _msgid,\n        topic,\n        ...restMessage\n      } = payload;\n\n      restMessage.nodetype = 'crawl'\n\n      try {\n        RED.util.setMessageProperty(restMessage, 'crawlerResults', JSON.parse(JSON.stringify(crawlerResult, null, 2)))\n      } catch (err: any) {\n        coreBrowser.internalDebugLog(err)\n        if (self.showErrors) {\n          this.error(err, restMessage)\n        }\n        restMessage.resultsConverted = JSON.stringify(crawlerResult, null, 2)\n        restMessage.error = err.message\n      }\n\n      if (self.browseTopic && self.browseTopic !== '') {\n        restMessage.browseTopic = self.browseTopic\n      }\n      if (restMessage.crawlerResults.length === 1 && isArray<CrawlerResult>(restMessage.crawlerResults[0])) {\n        restMessage.crawlerResults = restMessage.crawlerResults[0]\n      }\n\n      if (!self.justValue) {\n        restMessage.crawlerResultsCount = crawlerResult.length\n        if (self.connector) {\n          restMessage.endpoint = self.connector.endpoint\n        }\n        restMessage.session = self.connector.iiot.opcuaSession.name || 'none'\n      }\n\n      const msg = {\n        _msgid,\n        topic,\n        payload: restMessage\n      }\n\n      self.iiot.messageList.push(msg)\n\n      if (self.showStatusActivities && self.oldStatusParameter) {\n        self.oldStatusParameter = setNodeStatusTo(self, 'active', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n      }\n\n      // TODO: maybe here RED.util.set ...\n\n      self.iiot.delayMessageTimer.push(setTimeout(() => {\n        this.send(self.iiot.messageList.shift())\n      }, self.delayPerMessage * FAKTOR_SEC_TO_MSEC))\n    }\n\n    const resetAllTimer = function () {\n      self.iiot.delayMessageTimer.forEach((timerId: TodoTypeAny) => {\n        clearTimeout(timerId)\n        timerId = null\n      })\n    }\n\n    const startCrawling = async (payload: BrowserInputPayloadLike) => {\n      if(!self.connector) {\n        return\n      }\n\n      if (self.connector.functions.hasNoSession()) {\n        await self.connector.functions.startSession(self.id)\n      }\n\n      if (self.browseTopic && self.browseTopic !== '') {\n        crawl(self.connector.iiot.opcuaSession, payload, statusHandler)\n\n      } else {\n        if (payload.addressSpaceItems && payload.addressSpaceItems.length) {\n          coreBrowser.internalDebugLog('Start Crawling On AddressSpace Items')\n          crawlNodeList(self.connector.iiot.opcuaSession, payload)\n        } else {\n          this.error(new Error('No AddressSpace Items Or Root To Crawl'), payload)\n        }\n      }\n    }\n\n    const errorHandler = (err: Error, msg: NodeMessage) => {\n      this.error(err, msg)\n    }\n\n    const setStatus = (status: string | NodeStatus) => {\n      this.status(status)\n    }\n\n    const emitHandler = (msg: string) => {\n      this.emit(msg)\n    }\n\n    const onAlias = (event: string, callback: () => void) => {\n      this.on(event, callback)\n    }\n\n    type enhancedPayload = BrowserInputPayloadLike & {\n      _msgid: string\n      topic: string | undefined\n    }\n\n    this.on('input', function (msg: NodeMessageInFlow) {\n      const payload = msg.payload as enhancedPayload\n      self.browseTopic = coreBrowser.extractNodeIdFromTopic(payload, self);\n      payload._msgid = msg._msgid;\n      payload.topic = msg.topic;\n      startCrawling(msg.payload as BrowserInputPayloadLike).finally()\n    })\n\n    registerToConnector(this, setStatus, onAlias, errorHandler)\n\n    this.on('close', (done: () => void) => {\n      self.removeAllListeners()\n      resetAllTimer()\n\n      deregisterToConnector(this, () => {\n        resetIiotNode(this)\n        done()\n      })\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Crawler', OPCUAIIoTCrawler)\n}\n"]}