{"version":3,"sources":["../src/opcua-iiot-connector.ts"],"names":[],"mappings":"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","file":"opcua-iiot-connector.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as path from 'path'\nimport * as nodered from 'node-red'\nimport {NodeStatus} from 'node-red'\nimport {\n  ConnectorIIoT,\n  FsmConnectorStates,\n  getNodeOPCUAClientPath,\n  isInitializedIIoTNode,\n  resetIiotNode\n} from './core/opcua-iiot-core'\nimport {\n  AttributeIds,\n  ClientSession,\n  coerceMessageSecurityMode,\n  coerceSecurityPolicy,\n  DataTypeIds,\n  EndpointDescription,\n  findServers,\n  MessageSecurityMode,\n  nodesets,\n  ObjectTypeIds,\n  OPCUAClient,\n  ReferenceTypeIds,\n  SecurityPolicy,\n  StatusCodes,\n  VariableTypeIds\n} from \"node-opcua\";\nimport coreConnector, {logger} from \"./core/opcua-iiot-core-connector\";\nimport {FindServerResults} from \"node-opcua-client/source/tools/findservers\";\nimport _, {isUndefined} from \"underscore\";\nimport {UserTokenType} from \"node-opcua-service-endpoints\";\nimport {OPCUAClientOptions} from \"node-opcua-client/dist/opcua_client\";\nimport internalDebugLog = logger.internalDebugLog;\nimport detailDebugLog = logger.detailDebugLog;\nimport {getEnumKeys} from \"./types/helpers\";\nimport {createMachine, interpret} from \"@xstate/fsm\"\nimport {TodoTypeAny} from \"./types/placeholders\";\n\ninterface OPCUAIIoTConnectorCredentials {\n  user: string\n  password: string\n}\n\nexport type OPCUAIIoTConnectorNode = nodered.Node<OPCUAIIoTConnectorCredentials> & {\n  discoveryUrl: string | null\n  endpoint: string\n  keepSessionAlive: boolean\n  loginEnabled: boolean\n  securityPolicy: SecurityPolicy\n  messageSecurityMode: MessageSecurityMode\n  name: string\n  showErrors: boolean\n  individualCerts: boolean\n  publicCertificateFile: string | null\n  privateKeyFile: string | null\n  defaultSecureTokenLifetime: number\n  endpointMustExist: boolean\n  autoSelectRightEndpoint: boolean\n  strategyMaxRetry: number\n  strategyInitialDelay: number\n  strategyMaxDelay: number\n  strategyRandomisationFactor: number\n  requestedSessionTimeout: number\n  connectionStartDelay: number\n  reconnectDelay: number\n  connectionStopDelay: number\n  maxBadSessionRequests: number\n  securedCommunication?: boolean\n  iiot?: ConnectorIIoT\n  functions?: {\n    [key: string]: Function\n  }\n  on(event: 'connection_started', listener: (opcuaClient: OPCUAClient) => void): OPCUAIIoTConnectorNode,\n  on(event: 'session_started', listener: (opcuaSession: ClientSession) => void): void\n  on(event: 'connector_init', listener: (node: Node) => void): void\n\n  on(event: 'server_connection_close' | 'server_connection_abort' | 'connection_closed' | 'server_connection_lost' | 'reset_opcua_connection' | 'session_closed' | 'session_restart' | 'session_error' | 'after_reconnection',\n     listener: () => void): void\n}\n\ninterface OPCUAIIoTConnectorConfigurationDef extends nodered.NodeDef {\n  discoveryUrl: string\n  endpoint: string\n  keepSessionAlive: boolean\n  loginEnabled: boolean\n  securityPolicy: string\n  securityMode: string\n  name: string\n  showErrors: boolean\n  individualCerts: boolean\n  publicCertificateFile: string\n  privateKeyFile: string\n  defaultSecureTokenLifetime: number\n  endpointMustExist: boolean\n  autoSelectRightEndpoint: boolean\n  strategyMaxRetry: number\n  strategyInitialDelay: number\n  strategyMaxDelay: string\n  strategyRandomisationFactor: number\n  requestedSessionTimeout: number\n  connectionStartDelay: number\n  reconnectDelay: number\n  connectionStopDelay: number\n  maxBadSessionRequests: number\n}\n\n/**\n * OPC UA connector Node-RED config this.\n *\n * @param RED\n */\nmodule.exports = function (RED: nodered.NodeAPI) {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTConnectorConfiguration(\n    this: OPCUAIIoTConnectorNode, config: OPCUAIIoTConnectorConfigurationDef) {\n    const CONNECTION_START_DELAY = 2000 // msec.\n    const CONNECTION_STOP_DELAY = 2000 // msec.\n    const RECONNECT_DELAY = 1000 // msec.\n    const UNLIMITED_LISTENERS = 0\n\n    RED.nodes.createNode(this, config)\n    // HTML settings\n    this.discoveryUrl = config.discoveryUrl || null\n    this.endpoint = config.endpoint\n    this.endpointMustExist = config.endpointMustExist || false\n    this.keepSessionAlive = config.keepSessionAlive\n    this.loginEnabled = config.loginEnabled\n    this.name = config.name\n    this.showErrors = config.showErrors\n    this.securityPolicy = coerceSecurityPolicy(config.securityPolicy)\n    this.messageSecurityMode = coerceMessageSecurityMode(config.securityMode) || MessageSecurityMode.None\n    this.individualCerts = config.individualCerts\n    this.publicCertificateFile = config.publicCertificateFile\n    this.privateKeyFile = config.privateKeyFile\n    this.defaultSecureTokenLifetime = config.defaultSecureTokenLifetime || 120000\n    this.autoSelectRightEndpoint = config.autoSelectRightEndpoint\n    this.strategyMaxRetry = config.strategyMaxRetry || 10000\n    this.strategyInitialDelay = config.strategyInitialDelay || 1000\n    this.strategyMaxDelay = parseInt(config.strategyMaxDelay) || 30000\n    this.strategyRandomisationFactor = config.strategyRandomisationFactor || 0.2\n    this.requestedSessionTimeout = config.requestedSessionTimeout || 60000\n    this.connectionStartDelay = config.connectionStartDelay || CONNECTION_START_DELAY\n    this.reconnectDelay = config.reconnectDelay || RECONNECT_DELAY\n    this.connectionStopDelay = config.connectionStopDelay || CONNECTION_STOP_DELAY\n    this.maxBadSessionRequests = parseInt(config.maxBadSessionRequests?.toString()) || 10\n\n    this.iiot = coreConnector.initConnectorNode()\n\n    if (!this.iiot) throw Error('IIoT Initialization Failed')\n\n    this.setMaxListeners(UNLIMITED_LISTENERS)\n\n    const self = this\n\n    internalDebugLog('Open Connector Node')\n\n    let sessionStartTimeout: NodeJS.Timeout | null\n    let clientStartTimeout: NodeJS.Timeout | null\n    let disconnectTimeout: NodeJS.Timeout | null\n    let nodeOPCUAClientPath = getNodeOPCUAClientPath()\n\n    this.securedCommunication = (\n      this.securityPolicy !== SecurityPolicy.None &&\n      this.messageSecurityMode !== MessageSecurityMode.None\n    )\n\n    detailDebugLog('config: ' + this.publicCertificateFile)\n    detailDebugLog('config: ' + this.privateKeyFile)\n    detailDebugLog('securedCommunication: ' + this.securedCommunication.toString())\n\n    const initCertificatesAndKeys = () => {\n      if (this.securedCommunication) {\n        this.publicCertificateFile = this.publicCertificateFile || path.join(nodeOPCUAClientPath, '/certificates/client_selfsigned_cert_1024.pem')\n        detailDebugLog('using cert: ' + this.publicCertificateFile)\n\n        this.privateKeyFile = this.privateKeyFile || path.join(nodeOPCUAClientPath, '/certificates/PKI/own/private/private_key.pem')\n        detailDebugLog('using key: ' + this.privateKeyFile)\n      } else {\n        this.publicCertificateFile = null\n        this.privateKeyFile = null\n      }\n    }\n\n    if (this.loginEnabled) {\n      if (this.credentials) {\n        this.iiot.userIdentity = {\n          type: UserTokenType.UserName,\n          userName: this.credentials.user,\n          password: this.credentials.password\n        }\n        internalDebugLog('Connecting With Login Data On ' + this.endpoint)\n      } else {\n        /* istanbul ignore next */\n        this.error(new Error('Login Enabled But No Credentials'), {payload: ''})\n      }\n    }\n\n    /*  #########   CONNECTION  #########     */\n\n    const getUpdatedServerOptions = (): OPCUAClientOptions => {\n      initCertificatesAndKeys()\n      return {\n        securityPolicy: this.securityPolicy,\n        securityMode: this.messageSecurityMode,\n        defaultSecureTokenLifetime: this.defaultSecureTokenLifetime,\n        keepSessionAlive: this.keepSessionAlive,\n        certificateFile: this.publicCertificateFile ?? undefined,\n        privateKeyFile: this.privateKeyFile ?? undefined,\n        endpointMustExist: this.endpointMustExist,\n        requestedSessionTimeout: this.requestedSessionTimeout,\n        connectionStrategy: {\n          maxRetry: this.strategyMaxRetry,\n          initialDelay: this.strategyInitialDelay,\n          maxDelay: this.strategyMaxDelay,\n          randomisationFactor: this.strategyRandomisationFactor\n        }\n      }\n    }\n\n    const statusHandler = (status: string | NodeStatus): void => {\n      this.status(status)\n    }\n\n    const errorHandler = (err: Error): void => {\n      this.error(err)\n    }\n\n    const connectOPCUAEndpoint = async () => {\n      if (isUndefined(this.iiot))\n        return\n      if (!coreConnector.checkEndpoint(this.endpoint, errorHandler)) {\n        return\n      }\n\n      internalDebugLog('Connecting To Endpoint ' + this.endpoint)\n\n      this.iiot.opcuaClientOptions = getUpdatedServerOptions()\n\n      if (!this.iiot.opcuaClient)\n        this.iiot.opcuaClient = OPCUAClient.create({...this.iiot.opcuaClientOptions}) // Need to use the spread operator, because otherwise there is phantom circular references\n      if (Object.keys(this.iiot.opcuaClient).length === 0) {\n        /* istanbul ignore next */\n        detailDebugLog('Failed to create OPCUA Client ', {opcuaClient: this.iiot.opcuaClient})\n      }\n\n      if (this.autoSelectRightEndpoint) {\n        autoSelectEndpointFromConnection()\n      }\n      // coreConnector.setListenerToClient(node)\n      connectToClient()\n    }\n\n    const connectToClient = () => {\n      if (isUndefined(this.iiot))\n        return\n\n      if(isUndefined(this.iiot.stateService))\n        return\n\n      // Needs to be separate if so that typescript understands the types properly\n      if (isUndefined(this.iiot.opcuaClient))\n        return\n\n      if (!coreConnector.checkEndpoint(this.endpoint, errorHandler)) {\n        return\n      }\n      this.iiot.opcuaClient.connect(this.endpoint, (err: Error | undefined): void => {\n        if (isInitializedIIoTNode(this) && !isUndefined(this.iiot) && !isUndefined(this.iiot.stateService)) {\n          if (err) {\n            //this.iiot.stateMachine.lock().stopopcua()\n            this.iiot?.stateService.send('STOP')\n            handleError(err)\n          } else {\n            internalDebugLog('Client Is Connected To ' + this.endpoint)\n            //this.iiot.stateMachine.open()\n            this.iiot.stateService.send('OPEN')\n          }\n        } else {\n          /* istanbul ignore next */\n          internalDebugLog('iiot not valid on connect resolve')\n        }\n      })\n    }\n\n    const renewConnection = (done: () => void) => {\n      if (isInitializedIIoTNode<ConnectorIIoT>(this.iiot)) {\n        opcuaDirectDisconnect(() => {\n          if (isUndefined(this.iiot)) return;\n          renewFiniteStateMachine()\n          //this.iiot.stateMachine.idle().initopcua();\n          // Todo: the steps have to be used as before\n          this.iiot.stateService.send('IDLE')\n          this.iiot.stateService.send('INITOPCUA')\n          done()\n        })\n      } else {\n        /* istanbul ignore next */\n        internalDebugLog('iiot not valid on renew connection')\n      }\n    }\n\n    const endpointMatchForConnecting = (endpoint: EndpointDescription) => {\n      internalDebugLog('Auto Endpoint ' + endpoint.endpointUrl?.toString() + ' ' + endpoint.securityPolicyUri?.toString())\n      let securityMode = endpoint.securityMode\n      let securityPolicy = (endpoint.securityPolicyUri?.includes('SecurityPolicy#')) ? endpoint.securityPolicyUri.split('#')[1] : endpoint.securityPolicyUri\n\n      internalDebugLog('node-mode:' + this.messageSecurityMode + ' securityMode: ' + securityMode)\n      internalDebugLog('node-policy:' + this.securityPolicy + ' securityPolicy: ' + securityPolicy)\n\n      return (securityMode === this.messageSecurityMode && securityPolicy === this.securityPolicy)\n    }\n\n    const selectEndpointFromSettings = (discoverClient: OPCUAClient) => {\n      discoverClient.getEndpoints((err, endpoints) => {\n        if (err) {\n          /* istanbul ignore next */\n          internalDebugLog('Auto Switch To Endpoint Error ' + err)\n          if (this.showErrors) {\n            this.error(err, {payload: 'Get Endpoints Request Error'})\n          }\n        } else {\n          const endpoint = (endpoints || []).find((endpoint) => {\n            endpointMatchForConnecting(endpoint)\n          })\n\n          if (endpoint && endpoint.endpointUrl != null) {\n            /* istanbul ignore next */\n            internalDebugLog('Auto Switch To Endpoint ' + endpoint.endpointUrl)\n            this.endpoint = endpoint.endpointUrl\n          } else {\n            internalDebugLog('Auto Switch To Endpoint failed: no valid endpoints')\n          }\n        }\n\n        discoverClient.disconnect((err: Error | undefined) => {\n          if (err) {\n            /* istanbul ignore next */\n            internalDebugLog('Endpoints Auto Request Error ' + err)\n            if (this.showErrors) {\n              /* istanbul ignore next */\n              this.error(err, {payload: 'Discover Client Disconnect Error'})\n            }\n          } else {\n            internalDebugLog('Endpoints Auto Request Done With Endpoint ' + this.endpoint)\n          }\n        })\n      })\n    }\n\n    const autoSelectEndpointFromConnection = () => {\n      internalDebugLog('Auto Searching For Endpoint On ' + this.endpoint)\n\n      if (isUndefined(this.iiot) || isUndefined(this.iiot.opcuaClientOptions))\n        return\n\n      let endpointMustExist = this.iiot.opcuaClientOptions.endpointMustExist\n      this.iiot.opcuaClientOptions.endpointMustExist = false\n\n      let discoverClient = OPCUAClient.create(this.iiot.opcuaClientOptions)\n\n      discoverClient.connect(this.endpoint).then(() => {\n        internalDebugLog('Auto Searching Endpoint Connected To ' + this.endpoint)\n        selectEndpointFromSettings(discoverClient)\n        if (isUndefined(this.iiot) || isUndefined(this.iiot.opcuaClientOptions))\n          return\n\n        this.iiot.opcuaClientOptions.endpointMustExist = endpointMustExist\n      }).catch((err: Error) => {\n        /* istanbul ignore next */\n        internalDebugLog('Get Auto Endpoint Request Error ' + err.message)\n        if (isInitializedIIoTNode<ConnectorIIoT>(this.iiot) && !isUndefined(this.iiot.opcuaClientOptions)) {\n          this.iiot.opcuaClientOptions.endpointMustExist = endpointMustExist\n        }\n      })\n    }\n\n    /*  #########    SESSION    #########     */\n\n    const startSession = async (callerInfo: string) => {\n      internalDebugLog('Request For New Session From ' + callerInfo)\n      if (isUndefined(this.iiot)) {\n        /* istanbul ignore next */\n        return\n      }\n\n      if (isInactiveOnOPCUA()) {\n        internalDebugLog('State Is Not Active While Start Session-> ' + this.iiot.stateService.state.value)\n        if (this.showErrors) {\n          /* istanbul ignore next */\n          this.error(new Error('OPC UA Connector Is Not Active'), {payload: 'Create Session Error'})\n        }\n        return\n      }\n\n      if (this.iiot.stateService.state.value !== FsmConnectorStates.StateOpened) {\n        internalDebugLog('Session Request Not Allowed On State ' + this.iiot.stateService.state.value)\n        if (this.showErrors) {\n          /* istanbul ignore next */\n          this.error(new Error('OPC UA Connector Is Not Open'), {payload: 'Create Session Error'})\n        }\n        return\n      }\n\n      if (!this.iiot.opcuaClient) {\n        internalDebugLog('OPC UA Client Connection Is Not Valid On State ' + this.iiot.stateService.state.value)\n        if (this.showErrors) {\n          /* istanbul ignore next */\n          this.error(new Error('OPC UA Client Connection Is Not Valid'), {payload: 'Create Session Error'})\n        }\n        return\n      }\n\n      //this.iiot.stateMachine.sessionrequest()\n      this.iiot.stateService.send('SESSIONREQUEST')\n      const res = await this.iiot.opcuaClient.createSession(this.iiot.userIdentity)\n        .then((session: ClientSession) => {\n          if (isUndefined(this.iiot)) return\n\n          session.requestedMaxReferencesPerNode = 100000\n          this.iiot.opcuaSession = session\n          //this.iiot.stateMachine.sessionactive()\n          this.iiot.stateService.send('SESSIONACTIVATE')\n\n          detailDebugLog('Session Created On ' + this.endpoint + ' For ' + callerInfo)\n          coreConnector.logSessionInformation(this)\n\n          this.iiot.opcuaSession?.on('session_closed', (statusCode: number) => {\n            handleSessionClose(statusCode)\n          })\n        }).catch((err: Error) => {\n            /* istanbul ignore next */\n          if (isInitializedIIoTNode<ConnectorIIoT>(this.iiot)) {\n            //this.iiot.stateMachine.lock().stopopcua()\n            this.iiot.stateService.send('LOCK')\n            this.iiot.stateService.send('STOP')\n            handleError(err)\n          } else {\n            internalDebugLog(err.message)\n          }\n          this.emit('session_error', err)\n          return -1\n        })\n    }\n\n    const resetBadSession = () => {\n      if (!this.iiot) {\n        /* istanbul ignore next */\n        return\n      }\n\n      this.iiot.sessionNodeRequests += 1\n      detailDebugLog('Session Node Requests At Connector No.: ' + this.iiot.sessionNodeRequests)\n      if (this.showErrors) {\n        /* istanbul ignore next */\n        internalDebugLog('!!!!!!!!!!!!!!!!!!!!!   BAD SESSION ON CONNECTOR   !!!!!!!!!!!!!!!!!!')\n      }\n\n      if (this.iiot.sessionNodeRequests > this.maxBadSessionRequests) {\n        internalDebugLog('Reset Bad Session Request On State ' + this.iiot.stateService.state.value)\n        resetOPCUAConnection('ToManyBadSessionRequests')\n      }\n    }\n\n    const isInactiveOnOPCUA = () => {\n      //let state = this.iiot?.stateMachine?.getMachineState()\n      let state = this.iiot?.stateService?.state.value\n      return (state === FsmConnectorStates.StateStopped ||\n              state === FsmConnectorStates.StateEnd ||\n              state === FsmConnectorStates.StateRenewed ||\n              state === FsmConnectorStates.StateReconfigured)\n    }\n\n    const resetOPCUAConnection = (callerInfo: string) => {\n      detailDebugLog(callerInfo + ' Request For New OPC UA Connection')\n      if (isInactiveOnOPCUA() || isUndefined(this.iiot)) {\n        return\n      }\n\n      //this.iiot.stateMachine.lock().renew()\n      this.iiot.stateService.send('LOCK')\n      this.iiot.stateService.send('RENEW')\n      this.emit('reset_opcua_connection')\n      closeSession(() => {\n        renewConnection(() => {\n          detailDebugLog('OPC UA Connection Reset Done')\n        })\n      })\n    }\n\n    const handleError = (err: Error) => {\n      internalDebugLog('Handle Error On ' + this.endpoint + ' err: ' + err)\n      if (this.showErrors) {\n        /* istanbul ignore next */\n        this.error(err, {payload: 'Handle Connector Error'})\n      }\n    }\n\n    const closeSession = (done: () => void) => {\n      if (isUndefined(this.iiot) || _.isEmpty(this.iiot)) {\n        /* istanbul ignore next */\n        done()\n        return\n      }\n\n      if (this.iiot?.opcuaClient && this.iiot?.opcuaSession) {\n        detailDebugLog('Close Session And Remove Subscriptions From Session On State ' + this.iiot.stateService.state.value)\n\n        try {\n          this.iiot.opcuaSession.removeAllListeners()\n          this.iiot.opcuaClient.closeSession(this.iiot.opcuaSession, this.iiot.hasOpcUaSubscriptions, (err?: Error) => {\n            if (err) {\n              handleError(err)\n            }\n            done()\n          })\n        } catch (err: any) {\n          /* istanbul ignore next */\n          handleError(err)\n          done()\n        } finally {\n          if (this.iiot)\n            this.iiot.opcuaSession = undefined\n        }\n      } else {\n        internalDebugLog('Close Session Without Session On State ' + this.iiot.stateService.state.value)\n        done()\n      }\n    }\n\n    const hasNoSession = () => {\n      return _.isUndefined(this.iiot) || _.isUndefined(this.iiot?.opcuaSession) || _.isNull(this.iiot?.opcuaSession)\n    }\n\n    const hasSession = () => {\n      return !hasNoSession()\n    }\n\n    const handleSessionClose = (statusCode: number) => {\n      internalDebugLog('Session Closed With StatusCode ' + statusCode)\n      if (isUndefined(this.iiot)) {\n        return\n      }\n\n      if (isInactiveOnOPCUA()) {\n        detailDebugLog('Connector Is Not Active On OPC UA While Session Close Event')\n        return\n      }\n\n\n      coreConnector.logSessionInformation(this)\n      if (this.iiot?.stateMachine && this.iiot.stateService.state.value !== FsmConnectorStates.StateSessionRestart) {\n        //this.iiot.stateMachine.lock().sessionclose()\n        this.iiot.stateService.send('LOCK')\n        this.iiot.stateService.send('SESSIONCLOSE')\n      }\n    }\n\n    const disconnectNodeOPCUA = (done: () => void) => {\n      if (isUndefined(this.iiot) || _.isEmpty(this.iiot)) {\n        done()\n        return\n      }\n\n      internalDebugLog('OPC UA Disconnect Connector On State ' + this.iiot.stateService.state.value)\n\n      if (this.iiot?.opcuaClient) {\n        internalDebugLog('Close Node Disconnect Connector From ' + this.endpoint)\n        try {\n          this.iiot.opcuaClient.disconnect((err?: Error) => {\n            if (err) {\n              handleError(err)\n            }\n            internalDebugLog('Close Node Done For Connector On ' + this.endpoint)\n            done()\n          })\n        } catch (err: any) {\n          handleError(err)\n          done()\n        } finally {\n          this.iiot.opcuaClient = undefined\n        }\n      } else {\n        internalDebugLog('Close Node Done For Connector Without Client On ' + this.endpoint)\n        done()\n      }\n    }\n\n    this.on('close', (done: () => void) => {\n      self.removeAllListeners()\n\n      if (isUndefined(this.iiot) || _.isEmpty(this.iiot)) {\n        done()\n        return\n      }\n\n      if (!isInitializedIIoTNode<ConnectorIIoT>(this.iiot)) {\n        done() // if we have a very fast deploy clicking uer\n      } else {\n        if (isInactiveOnOPCUA()) {\n          detailDebugLog('OPC UA Client Is Not Active On Close Node')\n          resetIiotNode(this)\n          done()\n        } else {\n          detailDebugLog('OPC UA Client Is Active On Close Node With State ' + this.iiot.stateService.state.value)\n          if (this.iiot.stateService.state.value === FsmConnectorStates.StateSessionActive) {\n            closeConnector(() => {\n              resetIiotNode(this)\n              done()\n            })\n          } else {\n            internalDebugLog(this.iiot.stateService.state.value + ' -> !!!  CHECK CONNECTOR STATE ON CLOSE  !!!')\n            resetIiotNode(this)\n            done()\n          }\n        }\n      }\n    })\n\n    const opcuaDisconnect = (done: () => void) => {\n\n      if ( isUndefined(this.iiot) ||\n           isUndefined(this.iiot.registeredNodeList) ||\n          _.isEmpty(this.iiot) ||\n          _.isArray(this.iiot.registeredNodeList) === false)\n      {\n        opcuaDirectDisconnect(done)\n        return\n      }\n\n      if (Object.keys(this.iiot.registeredNodeList).length > 0) {\n        internalDebugLog('Connector Has Registered Nodes And Can Not Close The Node -> Count: ' + this.iiot.registeredNodeList.length)\n        if (disconnectTimeout) {\n          clearTimeout(disconnectTimeout)\n          disconnectTimeout = null\n        }\n        disconnectTimeout = setTimeout(() => {\n          if (isInitializedIIoTNode(this.iiot)) {\n            closeConnector(done)\n          }\n        }, this.connectionStopDelay)\n      } else {\n        opcuaDirectDisconnect(done)\n      }\n    }\n\n    const opcuaDirectDisconnect = (done: () => void) => {\n      if (isUndefined(this.iiot) || _.isEmpty(this.iiot)) {\n        done()\n        return\n      }\n\n      detailDebugLog('OPC UA Disconnect From Connector ' + this.iiot.stateService.state.value)\n      disconnectNodeOPCUA(() => {\n        if (isUndefined(this.iiot)) {\n          done()\n          return\n        }\n        //this.iiot.stateMachine.lock().close()\n        this.iiot.stateService.send('LOCK')\n        this.iiot.stateService.send('CLOSE')\n        let fsmState = this.iiot.stateService.state.value\n        detailDebugLog('Disconnected On State ' + fsmState)\n        // if (!isInactiveOnOPCUA() && fsmState !== 'CLOSED') { //Todo: check state machine to be closed\n        //    return;\n        // }\n        done()\n      })\n    }\n\n    const closeConnector = (done: () => void) => {\n      if (isUndefined(this.iiot)) {\n        return\n      }\n      detailDebugLog('Close Connector ' + this.iiot.stateService.value)\n\n      if (isInactiveOnOPCUA()) {\n        detailDebugLog('OPC UA Client Is Not Active On Close Connector')\n        done()\n        return\n      }\n\n      if (this.iiot.opcuaClient) {\n        opcuaDisconnect(done)\n      } else {\n        detailDebugLog('OPC UA Client Is Not Valid On Close Connector')\n        done()\n      }\n    }\n\n    const restartWithNewSettings = (config: OPCUAIIoTConnectorConfigurationDef, done: () => void) => {\n      if (isUndefined(this.iiot)) {\n        return\n      }\n      internalDebugLog('Renew With Flex Connector Request On State ' + this.iiot.stateService.state.value)\n      //this.iiot.stateMachine.lock().reconfigure()\n      this.iiot.stateService.send('LOCK')\n      this.iiot.stateService.send('RECONFIGURE')\n      updateSettings(config)\n      initCertificatesAndKeys()\n      renewConnection(done)\n    }\n\n    const normalizeCapitalization = (input: string): string => {\n      if (!input.length) return input\n      return input[0].toUpperCase() + input.substring(1).toLowerCase()\n    }\n\n    const updateSettings = (config: OPCUAIIoTConnectorConfigurationDef) => {\n      this.discoveryUrl = config.discoveryUrl || this.discoveryUrl\n      this.endpoint = config.endpoint || this.endpoint\n      this.keepSessionAlive = config.keepSessionAlive || this.keepSessionAlive\n      this.securityPolicy = coerceSecurityPolicy(config.securityPolicy || this.securityPolicy)\n      this.messageSecurityMode = coerceMessageSecurityMode(normalizeCapitalization((config.securityMode || this.messageSecurityMode) as string))\n      this.name = config.name || this.name\n      this.showErrors = config.showErrors || this.showErrors\n      this.publicCertificateFile = config.publicCertificateFile || this.publicCertificateFile\n      this.privateKeyFile = config.privateKeyFile || this.privateKeyFile\n      this.defaultSecureTokenLifetime = config.defaultSecureTokenLifetime || this.defaultSecureTokenLifetime\n      this.endpointMustExist = config.endpointMustExist || this.endpointMustExist\n      this.autoSelectRightEndpoint = config.autoSelectRightEndpoint || this.autoSelectRightEndpoint\n      this.strategyMaxRetry = config.strategyMaxRetry || this.strategyMaxRetry\n      this.strategyInitialDelay = config.strategyInitialDelay || this.strategyInitialDelay\n      this.strategyMaxDelay = parseInt(config.strategyMaxDelay) || this.strategyMaxDelay\n      this.strategyRandomisationFactor = config.strategyRandomisationFactor || this.strategyRandomisationFactor\n      this.requestedSessionTimeout = config.requestedSessionTimeout || this.requestedSessionTimeout\n      this.connectionStartDelay = config.connectionStartDelay || this.connectionStartDelay\n      this.reconnectDelay = config.reconnectDelay || this.reconnectDelay\n    }\n\n    const resetOPCUAObjects = () => {\n      if (isUndefined(this.iiot)) {\n        return\n      }\n      detailDebugLog('Reset All OPC UA Objects')\n      this.iiot.sessionNodeRequests = 0\n      if (this.iiot.opcuaSession) {\n        if (this.iiot.opcuaClient) {\n          this.iiot.opcuaClient.closeSession(this.iiot.opcuaSession, true)\n        }\n        this.iiot.opcuaSession.removeAllListeners()\n        this.iiot.opcuaSession = undefined\n      }\n      if (Object.keys(this.iiot.opcuaClient || {}).length > 1) {\n        this.iiot.opcuaClient?.removeAllListeners()\n        this.iiot.opcuaClient?.disconnect((err?: Error) => {\n          if (err && !isUndefined(this.iiot)) {\n            handleError(err)\n          }\n        })\n        this.iiot.opcuaClient = undefined\n      }\n    }\n\n    /* #########   FSM   #########     */\n\n    const connectorStateEventFunction = async (state: any) =>{\n      if(!state.changed) return;\n      if(this.iiot === undefined) return;\n\n      switch (state.value) {\n        case FsmConnectorStates.StateIdle:\n          detailDebugLog('Connector IDLE Event FSM')\n          resetOPCUAObjects()\n          break\n        case FsmConnectorStates.StateInit:\n          detailDebugLog('Connector Init OPC UA Event FSM')\n\n          if (!this.iiot) {\n            return\n          }\n\n          resetOPCUAObjects()\n          resetAllTimer()\n          this.emit('connector_init', this)\n          initCertificatesAndKeys()\n\n          if (clientStartTimeout) {\n            clearTimeout(clientStartTimeout)\n            clientStartTimeout = null\n          }\n          detailDebugLog('connecting OPC UA with delay of msec: ' + this.connectionStartDelay)\n          clientStartTimeout = setTimeout(() => {\n            if (isInitializedIIoTNode(this.iiot)) {\n              try {\n                connectOPCUAEndpoint()\n              } catch (err: any) {\n                handleError(err)\n                resetOPCUAObjects()\n                //this.iiot.stateMachine.lock().stopopcua()\n                this.iiot.stateService.send('LOCK')\n                this.iiot.stateService.send('STOP')\n              }\n            }\n          }, this.connectionStartDelay)\n          break\n        case FsmConnectorStates.StateOpened:\n          detailDebugLog('Connector Open Event FSM')\n          if (isInitializedIIoTNode(this.iiot)) {\n            this.emit('connection_started', this.iiot.opcuaClient, statusHandler)\n            internalDebugLog('Client Connected To ' + this.endpoint)\n            detailDebugLog('Client Options ' + JSON.stringify(this.iiot.opcuaClientOptions))\n            await startSession('Open Event')\n          }\n          break\n        case FsmConnectorStates.StateSessionRequested:\n          detailDebugLog('Connector Session Request Event FSM')\n          break\n        case FsmConnectorStates.StateSessionActive:\n          detailDebugLog('Connector Session Active Event FSM')\n          if (!isUndefined(this.iiot))\n            this.iiot.sessionNodeRequests = 0\n          this.emit('session_started', this.iiot?.opcuaSession)\n          break\n        case FsmConnectorStates.StateSessionRestart:\n          detailDebugLog('Connector Session Restart Event FSM')\n          this.emit('session_restart')\n          break\n        case FsmConnectorStates.StateSessionClosed:\n          detailDebugLog('Connector Session Close Event FSM')\n          this.emit('session_closed')\n          if (isInitializedIIoTNode(this.iiot)) {\n            this.iiot.opcuaSession = undefined\n          }\n          break\n        case FsmConnectorStates.StateClosed:\n          detailDebugLog('Connector Client Close Event FSM')\n          this.emit('connection_closed')\n          if (isInitializedIIoTNode(this.iiot)) {\n            if (Object.keys(this.iiot.opcuaClient || {}).length > 1) {\n              this.iiot.opcuaClient?.disconnect((err?: Error) => {\n                if (err) {\n                  handleError(err)\n                }\n              })\n              this.iiot.opcuaClient = undefined\n            }\n          }\n          break\n        case FsmConnectorStates.StateLocked:\n          detailDebugLog('Connector Lock Event FSM')\n          break\n        case FsmConnectorStates.StateUnlocked:\n          detailDebugLog('Connector Unlock Event FSM')\n          break\n        case FsmConnectorStates.StateStopped:\n          detailDebugLog('Connector Stopped Event FSM')\n          this.emit('connection_stopped')\n          if (isInitializedIIoTNode(this.iiot)) {\n            resetAllTimer()\n          }\n          break\n        case FsmConnectorStates.StateEnd:\n          detailDebugLog('Connector End Event FSM')\n          this.emit('connection_end')\n          if (isInitializedIIoTNode(this.iiot)) {\n            resetAllTimer()\n          }\n          break\n        case FsmConnectorStates.StateReconfigured:\n          detailDebugLog('Connector Reconfigure Event FSM')\n          this.emit('connection_reconfigure')\n          if (isInitializedIIoTNode(this.iiot)) {\n            resetAllTimer()\n          }\n          break\n        case FsmConnectorStates.StateRenewed:\n          detailDebugLog('Connector Renew Event FSM')\n          this.emit('connection_renew')\n          if (isInitializedIIoTNode(this.iiot)) {\n            resetAllTimer()\n          }\n          break\n        default:\n          throw new Error('Connector FSM is not in a valid state')\n      }\n\n    }\n\n    this.iiot.stateMachine = coreConnector.createConnectorFinalStateMachine()\n    this.iiot.stateService = coreConnector.startConnectorMachineService(this.iiot.stateMachine)\n    this.iiot.stateSubscription = coreConnector.subscribeConnectorFSMService(this.iiot.stateService, connectorStateEventFunction)\n\n\n\n    const resetAllTimer = () => {\n      detailDebugLog('Reset All Timer')\n      if (clientStartTimeout) {\n        clearTimeout(clientStartTimeout)\n        clientStartTimeout = null\n      }\n\n      if (sessionStartTimeout) {\n        clearTimeout(sessionStartTimeout)\n        sessionStartTimeout = null\n      }\n\n      if (disconnectTimeout) {\n        clearTimeout(disconnectTimeout)\n        disconnectTimeout = null\n      }\n    }\n\n    /*  ---------------------  handle config node behaviour --------------------- */\n    this.iiot.registeredNodeList = {}\n\n    const renewFiniteStateMachine = () => {\n      if (isUndefined(this.iiot))\n        return\n      this.iiot.stateMachine = null\n      this.iiot.stateService = null\n      this.iiot.stateSubscription = null\n\n      // @xstate/fsm\n      this.iiot.stateMachine = coreConnector.createConnectorFinalStateMachine()\n      this.iiot.stateService = coreConnector.startConnectorMachineService(this.iiot.stateMachine)\n      this.iiot.stateSubscription = coreConnector.subscribeConnectorFSMService(this.iiot.stateService, connectorStateEventFunction)\n    }\n\n    const registerForOPCUA = (opcuaNode: nodered.Node, onAlias: (event: string, ...args: any) => void) => {\n      if (!opcuaNode) {\n        internalDebugLog('Node Not Valid To Register In Connector')\n        return\n      }\n\n      internalDebugLog('Register In Connector NodeId: ' + opcuaNode.id)\n\n      if (!this.iiot || isUndefined(this.iiot.registeredNodeList)) {\n        internalDebugLog('Node Not Initialized With a registeredNodeList To Register In Connector')\n        return\n      }\n\n      this.iiot.registeredNodeList[opcuaNode.id] = opcuaNode\n\n      onAlias('opcua_client_not_ready', () => {\n        if (isInitializedIIoTNode(this.iiot) && this.iiot.stateService.state.value !== FsmConnectorStates.StateEnd) {\n          resetBadSession()\n        }\n      })\n\n      if (Object.keys(this.iiot.registeredNodeList).length === 1) {\n        internalDebugLog('Start Connector OPC UA Connection')\n        renewFiniteStateMachine()\n        this.iiot.stateService.send('INITOPCUA');\n      } else {\n      }\n    }\n\n    const deregisterForOPCUA = (opcuaNode: nodered.Node, done: () => void) => {\n      if (!opcuaNode) {\n        internalDebugLog('Node Not Valid To Deregister In Connector')\n        done()\n        return\n      }\n\n      opcuaNode.removeAllListeners('opcua_client_not_ready')\n\n      if (!this.iiot || isUndefined(this.iiot.registeredNodeList)) {\n        internalDebugLog('Node Not Initialized With a registeredNodeList To Deregister In Connector')\n        return\n      }\n\n      internalDebugLog('Deregister In Connector NodeId: ' + opcuaNode.id)\n      delete this.iiot.registeredNodeList[opcuaNode.id]\n\n      if (this.iiot.stateService.state.value === FsmConnectorStates.StateStopped || this.iiot.stateService.state.value === FsmConnectorStates.StateEnd) {\n        done()\n        return\n      }\n\n      if (Object.keys(this.iiot.registeredNodeList).length === 0) {\n        //this.iiot.stateMachine.lock().stopopcua()\n        this.iiot.stateService.send('LOCK')\n        this.iiot.stateService.send('STOP')\n        if (this.iiot.opcuaClient) {\n          detailDebugLog('OPC UA Direct Disconnect On Unregister Of All Nodes')\n          try {\n            this.iiot.opcuaClient.disconnect((err?: Error) => {\n              if (err) {\n                handleError(err)\n              }\n              done()\n            })\n          } catch (err: any) {\n            handleError(err)\n            done()\n          } finally {\n            this.iiot.opcuaClient.removeAllListeners()\n          }\n        } else {\n          done()\n        }\n      } else {\n        done()\n      }\n    }\n\n    renewFiniteStateMachine()\n\n    this.functions = {\n      restartWithNewSettings,\n      registerForOPCUA,\n      deregisterForOPCUA,\n      getUpdatedServerOptions,\n      hasNoSession,\n      hasSession,\n      startSession\n    }\n\n    if (process.env.isTest == 'TRUE') {\n      this.functions = {\n        ...this.functions,\n        registerForOPCUA,\n        connectToClient,\n        connectOPCUAEndpoint,\n        resetBadSession,\n        renewConnection,\n        handleError,\n        deregisterForOPCUA,\n      }\n    }\n  }\n\n\n  try {\n    RED.nodes.registerType('OPCUA-IIoT-Connector', OPCUAIIoTConnectorConfiguration, {\n      credentials: {\n        user: {type: 'text'},\n        password: {type: 'password'}\n      }\n    })\n  } catch (e: any) {\n    internalDebugLog(e.message)\n  }\n\n  /*  ---------------------  HTTP Requests --------------------- */\n\n  RED.httpAdmin.get('/opcuaIIoT/client/discover/:id/:discoveryUrl', RED.auth.needsPermission('opcua.discovery'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id) as OPCUAIIoTConnectorNode\n    let discoverUrlRequest = decodeURIComponent(req.params.discoveryUrl)\n    internalDebugLog('Get Discovery Request ' + JSON.stringify(req.params) + ' for ' + discoverUrlRequest)\n    if (node) {\n      if (discoverUrlRequest && !discoverUrlRequest.includes('opc.tcp://')) {\n        res.json([])\n      } else {\n        findServers(discoverUrlRequest, function (err: Error | null, results?: FindServerResults) {\n          if (!err && results) {\n            const endpoints = results.servers.flatMap((server) => server.discoveryUrls)\n            res.json(endpoints)\n          } else {\n            internalDebugLog('Perform Find Servers Request ' + err)\n            if (node.showErrors) {\n              node.error(err, {payload: ''})\n            }\n            res.json([])\n          }\n        })\n      }\n    } else {\n      internalDebugLog('Get Discovery Request None Node ' + JSON.stringify(req.params))\n      res.json([])\n    }\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/client/endpoints/:id/:endpointUrl', RED.auth.needsPermission('opcua.endpoints'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id) as OPCUAIIoTConnectorNode\n    let endpointUrlRequest = decodeURIComponent(req.params.endpointUrl)\n    internalDebugLog('Get Endpoints Request ' + JSON.stringify(req.params) + ' for ' + endpointUrlRequest)\n    if (isUndefined(node.iiot)) {\n      node.error('IIoT invalid')\n      return;\n    }\n    if (node) {\n      if (endpointUrlRequest && !endpointUrlRequest.includes('opc.tcp://')) {\n        res.json([])\n      } else {\n        if (!node.iiot?.opcuaClientOptions) {\n          node.iiot.opcuaClientOptions = node.functions?.getUpdatedServerOptions()\n        }\n        let discoveryClient = OPCUAClient.create({\n          ...node.iiot.opcuaClientOptions,\n          endpointMustExist: false\n        })\n        discoveryClient.connect(endpointUrlRequest).then(() => {\n          internalDebugLog('Get Endpoints Connected For Request')\n          discoveryClient.getEndpoints(function (err, endpoints) {\n            if (err) {\n              if (node.showErrors) {\n                node.error(err, {payload: ''})\n              }\n              internalDebugLog('Get Endpoints Request Error ' + err)\n              res.json([])\n            } else {\n              internalDebugLog('Sending Endpoints For Request')\n              res.json(endpoints)\n            }\n            discoveryClient.disconnect(() => {\n              internalDebugLog('Get Endpoints Request Disconnect')\n            });\n          })\n        }).catch(function (err: Error) {\n          internalDebugLog('Get Endpoints Request Error ' + err.message)\n          res.json([])\n        })\n      }\n    } else {\n      internalDebugLog('Get Endpoints Request None Node ' + JSON.stringify(req.params))\n      res.json([])\n    }\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/DataTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.datatypes'), function (req, res) {\n    res.json(_.toArray(_.invert(DataTypeIds)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/AttributeIds', RED.auth.needsPermission('opcuaIIoT.plain.attributeids'), function (req, res) {\n    res.json(_.toArray(_.invert(AttributeIds)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/StatusCodes', RED.auth.needsPermission('opcuaIIoT.plain.statuscodes'), function (req, res) {\n    res.json(_.toArray(_.invert(StatusCodes)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/ObjectTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.objecttypeids'), function (req, res) {\n    res.json(ObjectTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/VariableTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.variabletypeids'), function (req, res) {\n    res.json(VariableTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/ReferenceTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.referencetypeids'), function (req, res) {\n    res.json(ReferenceTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/xmlsets/public', RED.auth.needsPermission('opcuaIIoT.xmlsets'), function (req, res) {\n    const xmlset = [\n      nodesets.di,\n      nodesets.adi,\n      'public/vendor/opc-foundation/xml/Opc.ISA95.NodeSet2.xml',\n      'public/vendor/opc-foundation/xml/Opc.Ua.Adi.NodeSet2.xml',\n      'public/vendor/opc-foundation/xml/Opc.Ua.Di.NodeSet2.xml',\n      'public/vendor/opc-foundation/xml/Opc.Ua.Gds.NodeSet2.xml',\n      'public/vendor/harting/10_di.xml',\n      'public/vendor/harting/20_autoid.xml',\n      'public/vendor/harting/30_aim.xml',\n    ]\n    res.json(xmlset)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/DataTypeIds', RED.auth.needsPermission('opcuaIIoT.list.datatypeids'), function (req, res) {\n    const resultTypeList = enumToTypeList(DataTypeIds)\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/EventTypeIds', RED.auth.needsPermission('opcuaIIoT.list.eventtypeids'), function (req, res) {\n    const eventTypesResults = enumToTypeList(ObjectTypeIds).filter((item) => {\n      return item.label.indexOf('Event') > -1\n    })\n    res.json(eventTypesResults)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/InstanceTypeIds', RED.auth.needsPermission('opcuaIIoT.list.instancetypeids'), function (req, res) {\n    const resultTypeList = [ObjectTypeIds, VariableTypeIds].flatMap((item) => enumToTypeList(item))\n\n    res.json(resultTypeList)\n  })\n\n  const enumToTypeList = <O extends object>(inputEnum: O): typeListItem<keyof O>[] => {\n    return getEnumKeys(inputEnum).map((key) => {\n      return {nodeId: `i=${inputEnum[key]}`, label: key}\n    })\n  }\n\n  type typeListItem<T> = {\n    nodeId: `i=${string}`\n    label: T\n  }\n\n  RED.httpAdmin.get('/opcuaIIoT/list/VariableTypeIds', RED.auth.needsPermission('opcuaIIoT.list.variabletypeids'), function (req, res) {\n    const resultTypeList = enumToTypeList(VariableTypeIds)\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/ReferenceTypeIds', RED.auth.needsPermission('opcuaIIoT.list.referencetypeids'), function (req, res) {\n    const resultTypeList = enumToTypeList(ReferenceTypeIds)\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/FilterTypes', RED.auth.needsPermission('opcuaIIoT.list.filterids'), function (req, res) {\n    const resultTypeList = [\n      {name: 'dataType', label: 'Data Type'},\n      {name: 'dataValue', label: 'Data Value'},\n      {name: 'nodeClass', label: 'Node Class'},\n      {name: 'typeDefinition', label: 'Type Definition'},\n      {name: 'browseName', label: 'Browse Name'},\n      {name: 'nodeId', label: 'Node Id'},\n    ]\n    res.json(resultTypeList)\n  })\n}\n"]}