{"version":3,"sources":["../src/opcua-iiot-node.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AACH,YAAY,CAAA;;;;;AAKZ,4DAAkE;AAClE,gFAAwD;AACxD,4DAA2B;AAsB3B;;;;GAIG;AACH,MAAM,CAAC,OAAO,GAAG,CAAC,GAAoB,EAAE,EAAE;IACxC,sBAAsB;IAEtB,SAAS,aAAa,CAAsB,MAAwB;QAClE,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAA;QAC3B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAA;QAC/B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAA;QACzB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAA;QACzB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAA;QACvB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAA;QACnC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAA;QAEnC,IAAI,IAAI,GAAgB,IAAI,CAAA;QAC5B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;QAEd,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAA;QAC5B,IAAI,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC,CAAA;QAEvD,IAAI,CAAC,sBAAsB,GAAG,GAAG,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAA;YAE5C,IAAI,IAAI,CAAC,UAAU,KAAK,QAAQ,EAAE;gBAChC,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;oBACxB,IAAI,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAC,CAAC,CAAA;iBAC9D;qBAAM;oBACL,IAAI,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAC,CAAC,CAAA;iBACnE;aACF;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAC,CAAC,CAAA;aAC5D;QACH,CAAC,CAAA;QAED,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAsB,EAAE,EAAE;YAE1C,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAE9B,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAA;YACrC,MAAM,OAAO,GAAG,GAAG,CAAC,OAAsB,CAAA;YAC1C,MAAM,KAAK,GAAgB,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,EAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC;YACxE,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,EAAE,CAAA;YACjD,MAAM,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,IAAI,EAAE,CAAA;YAEzD,IAAI,IAAI,CAAC,UAAU,KAAK,OAAO,EAAE;gBAC/B,iBAAiB,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAC,CAAC,CAAA;gBAC3F,IAAI;oBACF,IAAG,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAC;wBAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAA;qBACnC;oBACD,aAAa,CAAC,IAAI,CAAC,IAAA,4CAA0B,EAAE,CAAC,oBAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;iBAC7G;gBAAC,OAAO,GAAG,EAAE;oBACZ,kCAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAA;oBAC5B,IAAI,IAAI,CAAC,UAAU,EAAE;wBACnB,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;qBACrB;iBACF;aACF;iBAAM;gBACL,iBAAiB,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAC,CAAC,CAAA;aAC5F;YAED,MAAM,aAAa,GAAG;gBACpB,QAAQ,EAAE,MAAM;gBAChB,UAAU,EAAE,IAAI,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU;gBACjD,iBAAiB;gBACjB,aAAa;gBACb,KAAK;aACN,CAAA;YAED,MAAM,aAAa,GAAG;gBACpB,OAAO,EAAE,aAAa;gBACtB,KAAK;gBACL,MAAM,EAAE,GAAG,CAAC,MAAM;aACnB,CAAA;YACD,kCAAM,CAAC,gBAAgB,CAAC,wBAAwB,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAA;YACvE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QAC1B,CAAC,CAAC,CAAA;IAEJ,CAAC;IAED,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAA;AAC1D,CAAC,CAAA","file":"opcua-iiot-node.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport {NodeMessageInFlow} from \"@node-red/registry\";\nimport {convertDataValueByDataType} from \"./core/opcua-iiot-core\";\nimport {logger} from \"./core/opcua-iiot-core-connector\";\nimport _ from \"underscore\";\n\ninterface OPCUAIIoTNode extends nodered.Node {\n  nodeId: string\n  datatype: string\n  value: string\n  topic: string\n  name: string\n  injectType: string\n  showErrors: string\n}\n\ninterface OPCUAIIoTNodeDef extends nodered.NodeDef {\n  nodeId: string\n  datatype: string\n  value: string\n  topic: string\n  name: string\n  injectType: string\n  showErrors: string\n}\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTNode(this: OPCUAIIoTNode, config: OPCUAIIoTNodeDef) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.datatype = config.datatype\n    this.value = config.value\n    this.topic = config.topic\n    this.name = config.name\n    this.injectType = config.injectType\n    this.showErrors = config.showErrors\n\n    let self: TodoTypeAny = this\n    self.iiot = {}\n\n    self.iiot.subscribed = false\n    self.status({fill: 'blue', shape: 'ring', text: 'new'})\n\n    self.toggleNodeStatusSymbol = () => {\n      self.iiot.subscribed = !self.iiot.subscribed\n\n      if (self.injectType === 'listen') {\n        if (self.iiot.subscribed) {\n          self.status({fill: 'blue', shape: 'dot', text: 'subscribed'})\n        } else {\n          self.status({fill: 'blue', shape: 'ring', text: 'not subscribed'})\n        }\n      } else {\n        self.status({fill: 'blue', shape: 'dot', text: 'injected'})\n      }\n    }\n\n    this.on('input', (msg: NodeMessageInFlow) => {\n\n      self.toggleNodeStatusSymbol();\n\n      const topic = msg.topic || self.topic\n      const payload = msg.payload as TodoTypeAny\n      const value: TodoTypeAny = payload?.value ? payload.value : msg.payload;\n      const valuesToWrite = payload.valuesToWrite || []\n      const addressSpaceItems = payload.addressSpaceItems || []\n\n      if (self.injectType === 'write') {\n        addressSpaceItems.push({name: self.name, nodeId: self.nodeId, datatypeName: self.datatype})\n        try {\n          if(typeof self.value !== \"string\"){\n            self.value = self.value.toString()\n          }\n          valuesToWrite.push(convertDataValueByDataType( (_.isEmpty(self.value)) ? value : self.value, self.datatype))\n        } catch (err) {\n          logger.internalDebugLog(err)\n          if (self.showErrors) {\n            this.error(err, msg)\n          }\n        }\n      } else {\n        addressSpaceItems.push({name: self.name, nodeId: self.nodeId, datatypeName: self.datatype})\n      }\n\n      const outputPayload = {\n        nodetype: \"node\",\n        injectType: self.injectType || payload.injectType,\n        addressSpaceItems,\n        valuesToWrite,\n        value,\n      }\n\n      const outputMessage = {\n        payload: outputPayload,\n        topic,\n        _msgid: msg._msgid\n      }\n      logger.internalDebugLog('node msg stringified: ' + JSON.stringify(msg))\n      this.send(outputMessage)\n    })\n\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Node', OPCUAIIoTNode)\n}\n"]}