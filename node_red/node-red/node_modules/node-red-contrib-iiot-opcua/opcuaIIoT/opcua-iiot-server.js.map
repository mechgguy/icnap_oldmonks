{"version":3,"sources":["../src/opcua-iiot-server.ts"],"names":[],"mappings":"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","file":"opcua-iiot-server.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {NodeMessage, NodeStatus} from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport coreServer from \"./core/opcua-iiot-core-server\";\nimport {isInitializedIIoTNode, resetIiotNode, setNodeStatusTo} from \"./core/opcua-iiot-core\";\n\n\ntype OPCUAIIoTServer = nodered.Node & {\n  asoDemo: boolean\n  on(event: 'shutdown', listener: () => void): void\n}\n\ninterface OPCUAIIoTServerDef extends nodered.NodeDef {\n  asoDemo: boolean\n}\n\n/**\n * Server Node-RED node.\n *\n * @param RED\n */\nmodule.exports = (RED: nodered.NodeAPI) => {\n  // SOURCE-MAP-REQUIRED\n\n  function OPCUAIIoTServer(this: OPCUAIIoTServer, config: OPCUAIIoTServerDef) {\n    RED.nodes.createNode(this, config)\n    coreServer.internalDebugLog('Open Server Node')\n\n    this.asoDemo = config.asoDemo // ASO (address space objects) Demo\n    let self: TodoTypeAny = this;\n    coreServer.readConfigOfServerNode(this, config)\n    coreServer.initServerNode(self)\n    coreServer.loadNodeSets(self, __dirname)\n    // node = coreServer.loadCertificates(node)\n\n    const initNewServer = () => {\n      self = coreServer.initRegisterServerMethod(self)\n      let serverOptions = coreServer.buildGeneralServerOptions(self, 'Fix')\n\n      try {\n        coreServer.createServer(self, serverOptions, postInitialize, statusHandler, RED.settings.verbose)\n      } catch (err) {\n        this.emit('server_create_error')\n        handleServerError(err as Error, {payload: 'Server Failure! Please, check the server settings!'})\n      }\n    }\n\n    const handleServerError = (err: Error, msg: TodoTypeAny) => {\n      coreServer.internalDebugLog(err)\n      if (self.showErrors) {\n        this.error(err, msg)\n      }\n    }\n\n    const statusHandler = (status: string | NodeStatus) => {\n      this.status(status)\n    }\n\n    const errorHandler = (err: any, msg?: NodeMessage) => {\n      this.error(err, msg)\n    }\n\n    const postInitialize = () => {\n      coreServer.constructAddressSpace(self.iiot.opcuaServer, self.asoDemo)\n        .then((err: TodoTypeAny) => {\n          if (err) {\n            handleServerError(err, {payload: 'Server Address Space Problem'})\n          } else {\n            coreServer.start(self.iiot.opcuaServer, self)\n              .then(() => {\n                self.oldStatusParameter = setNodeStatusTo(self, 'active', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n                this.emit('server_running')\n              }).catch((err: Error) => {\n              if (isInitializedIIoTNode(self)) {\n                self.iiot.opcuaServer = null\n              }\n              this.emit('server_start_error')\n              self.oldStatusParameter = setNodeStatusTo(self, 'errors', self.oldStatusParameter, self.showStatusActivities, statusHandler)\n              handleServerError(err, {payload: 'Server Start Failure'})\n            })\n          }\n        }).catch(function (err: Error) {\n        handleServerError(err, {payload: 'Server Address Space Failure'})\n      })\n    }\n\n    initNewServer()\n\n    this.on('input', (msg: TodoTypeAny) => {\n      if (!self.iiot.opcuaServer || !self.iiot.initialized) {\n        handleServerError(new Error('Server Not Ready For Inputs'), msg)\n        return\n      }\n\n      switch (msg.payload.injectType) {\n        case 'ASO':\n          changeAddressSpace(msg)\n          break\n        case 'CMD':\n          executeOpcuaCommand(msg)\n          break\n        default:\n          handleServerError(new Error('Unknown Inject Type ' + msg.injectType), msg)\n      }\n\n      this.send(msg)\n    })\n\n    const changeAddressSpace = (msg: TodoTypeAny) => {\n      // TODO: refactor to work with the new OPC UA type list and option to set add type\n      if (msg.payload.objecttype && msg.payload.objecttype.indexOf('Variable') > -1) {\n        coreServer.addVariableToAddressSpace(self, msg, msg.payload.objecttype, false, handleServerError)\n      } else if (msg.payload.objecttype && msg.payload.objecttype.indexOf('Property') > -1) {\n        coreServer.addVariableToAddressSpace(self, msg, msg.payload.objecttype, true, handleServerError)\n      } else {\n        coreServer.addObjectToAddressSpace(self, msg, msg.payload.objecttype, handleServerError)\n      }\n    }\n\n    const executeOpcuaCommand = (msg: TodoTypeAny) => {\n      switch (msg.payload.commandType) {\n        case 'restart':\n          restartServer()\n          break\n        case 'deleteNode':\n          coreServer.deleteNodeFromAddressSpace(self, msg, handleServerError)\n          break\n        default:\n          handleServerError(new Error('Unknown OPC UA Command'), msg)\n      }\n    }\n\n    const sendHandler = (msg: TodoTypeAny) => {\n      this.send(msg)\n    }\n\n    const emitHandler = (eventName: string | symbol, ...args: any[]) => {\n      this.emit(eventName, ...args)\n    }\n\n    const restartServer = () => {\n      coreServer.internalDebugLog('Restart OPC UA Server')\n      coreServer.restartServer(self, statusHandler, emitHandler, sendHandler)\n\n      if (self.iiot.opcuaServer) {\n        coreServer.internalDebugLog('OPC UA Server restarted')\n      } else {\n        coreServer.internalDebugLog('Can not restart OPC UA Server')\n      }\n    }\n\n    this.on('close', (done: () => void) => {\n      closeServer(() => {\n        coreServer.internalDebugLog('Close Server Node')\n        resetIiotNode(self)\n        done()\n      })\n    })\n\n    this.on('shutdown', () => {\n      this.status({fill: 'yellow', shape: 'dot', text: 'restarting'})\n      closeServer(() => {\n        coreServer.internalDebugLog('Server Node Shutdown')\n      })\n      self.iiot.opcuaServer = null\n      initNewServer()\n    })\n\n    const closeServer = (done: () => void) => {\n      self.removeAllListeners()\n\n      coreServer.destructAddressSpace(() => {\n        self.iiot.opcuaServer.removeAllListeners()\n        self.iiot.opcuaServer.shutdown(self.delayToClose, done)\n      })\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server', OPCUAIIoTServer)\n}\n"]}