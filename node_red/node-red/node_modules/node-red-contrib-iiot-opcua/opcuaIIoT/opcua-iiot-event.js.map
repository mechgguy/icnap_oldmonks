{"version":3,"sources":["../src/opcua-iiot-event.ts"],"names":[],"mappings":"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","file":"opcua-iiot-event.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\nimport * as nodered from \"node-red\";\nimport {NodeStatus} from \"node-red\";\nimport {TodoTypeAny} from \"./types/placeholders\";\nimport {constructEventFilter, EventFilter} from \"node-opcua\";\nimport {NodeMessageInFlow} from \"@node-red/registry\";\nimport coreListener from \"./core/opcua-iiot-core-listener\";\nimport {InjectPayload} from \"./opcua-iiot-inject\";\nimport {BrowserPayload} from \"./opcua-iiot-browser\";\nimport {Like} from \"./types/helpers\";\nimport {IotOpcUaNodeMessage} from \"./core/opcua-iiot-core\";\n\ninterface OPCUAIIoTEvent extends nodered.Node {\n  eventType: string\n  eventTypeLabel: string\n  resultType: string\n  queueSize: string\n  usingListener: string\n  name: string\n  showStatusActivities: boolean\n  showErrors: boolean\n}\n\ninterface OPCUAIIoTEventDef extends nodered.NodeDef {\n  eventType: string\n  eventTypeLabel: string\n  resultType: string\n  queueSize: string\n  usingListener: string\n  name: string\n  showStatusActivities: boolean\n  showErrors: boolean\n}\n\n\nexport type EventMessage = NodeMessageInFlow & {\n  payload: EventPayload\n}\nexport type EventPayload = (InjectPayload | BrowserPayload | IotOpcUaNodeMessage) & {\n  eventType?: string,\n  uaEventFilter?: EventFilter,\n  uaEventFields?: string[],\n  nodetype: 'events' | string,\n  queueSize?: number,\n  interval?: number,\n}\n\nexport type  EventPayloadLike = Like<EventPayload>\n\n/**\n * Event Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED: nodered.NodeAPI) {\n  // SOURCE-MAP-REQUIRED\n  function OPCUAIIoTEvent(this: OPCUAIIoTEvent, config: OPCUAIIoTEventDef) {\n    RED.nodes.createNode(this, config)\n    this.eventType = config.eventType\n    this.eventTypeLabel = config.eventTypeLabel\n    this.resultType = config.resultType || 'basic'\n    this.queueSize = config.queueSize\n    this.usingListener = config.usingListener\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    let self: OPCUAIIoTEvent & TodoTypeAny = this\n    self.iiot = {}\n\n    const statusCall = (status: NodeStatus | string) => {\n      this.status(status)\n    }\n    self.iiot.subscribed = false\n\n    statusCall({fill: 'blue', shape: 'ring', text: 'new'})\n    this.on('input', (msg: NodeMessageInFlow) => {\n      self.iiot.subscribed = !self.iiot.subscribed\n\n      if (self.usingListener) {\n        if (self.iiot.subscribed) {\n          statusCall({fill: 'blue', shape: 'dot', text: 'subscribed'})\n        } else {\n          statusCall({fill: 'blue', shape: 'ring', text: 'not subscribed'})\n        }\n      } else {\n        statusCall({fill: 'blue', shape: 'dot', text: 'injected'})\n      }\n\n      const uaEventFields = [\n        ...coreListener.getBasicEventFields(),\n        ...getAdditionalEventFields()\n      ]\n\n      const interval = (msg.payload as InjectPayload).value;\n\n      const uaEventFilter: EventFilter = constructEventFilter(uaEventFields)\n      const responsePayload: EventPayload = {\n        ...msg.payload as IotOpcUaNodeMessage,\n        eventType: self.eventType,\n        uaEventFilter: uaEventFilter,\n        uaEventFields: uaEventFields,\n        nodetype: 'events',\n        queueSize: self.queueSize,\n        interval: typeof interval === 'number' ? interval : 1000\n      }\n\n      const responseMessage: EventMessage = {\n        _msgid: msg._msgid,\n        payload: responsePayload,\n        topic: msg.topic,\n      }\n\n      // TODO: send works but it has a problem with debug node and ByteString\n      // I'm not sure what this comment refers to, but I'm leaving it just in case.\n      // Means we can send ByteStrings here, but it was to notice, that the debug node of node-red had/has a problem with ByteStrings in the UI.\n      this.send(responseMessage)\n    })\n\n    const getAdditionalEventFields = () => {\n      switch (self.resultType) {\n        case 'condition':\n          return (coreListener.getConditionFields())\n        case 'state':\n          return (coreListener.getStateFields())\n        case 'all':\n          return (coreListener.getAllEventFields())\n        default:\n          return []\n      }\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Event', OPCUAIIoTEvent)\n}\n"]}