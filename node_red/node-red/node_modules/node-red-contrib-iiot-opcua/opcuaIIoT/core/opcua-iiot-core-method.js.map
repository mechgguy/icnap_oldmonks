{"version":3,"sources":["../src/core/opcua-iiot-core-method.ts"],"names":[],"mappings":"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","file":"opcua-iiot-core-method.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n// SOURCE-MAP-REQUIRED\n\nimport {TodoTypeAny} from \"../types/placeholders\";\n\nimport debug from 'debug';\nimport {ArgumentDefinition, ClientSession, ClientSessionCallService, coerceNodeId} from \"node-opcua\";\nimport {convertDataValueByDataType} from \"./opcua-iiot-core\";\nimport {CallMethodResult} from \"node-opcua-service-call\";\n\nconst internalDebugLog = debug('opcuaIIoT:method') // eslint-disable-line no-use-before-define\nconst detailDebugLog = debug('opcuaIIoT:method:details') // eslint-disable-line no-use-before-define\n\nconst getArgumentDefinition = function (session: ClientSessionCallService, msg: TodoTypeAny) {\n  return new Promise(\n    function (resolve, reject) {\n      if (!session) {\n        reject(new Error('Method Argument Definition Session Not Valid'))\n      } else {\n        try {\n          let methodId = coerceNodeId(msg.payload.methodId)\n\n          session.getArgumentDefinition(methodId, function (err: Error | null, args?: ArgumentDefinition) {\n            if (err) {\n              reject(err)\n            } else {\n              let results: TodoTypeAny = {}\n              results.methodId = methodId\n              results.methodDefinition = {}\n              results.methodDefinition.inputArguments = args?.inputArguments\n              results.methodDefinition.outputArguments = args?.outputArguments\n              resolve(results)\n            }\n          })\n        } catch (err) {\n          reject(err)\n        }\n      }\n    })\n}\n\nconst callMethods = function (session: ClientSessionCallService, msg: TodoTypeAny) {\n  return new Promise(\n    function (resolve, reject) {\n      if (!session) {\n        reject(new Error('Methods Call Session Not Valid'))\n      } else {\n        try {\n          msg.payload.inputArguments.forEach(function (element: TodoTypeAny) {\n            element.value = convertDataValueByDataType(element.value, element.dataType)\n          })\n          let methodCalls = [{\n            objectId: coerceNodeId(msg.payload.objectId),\n            methodId: coerceNodeId(msg.payload.methodId),\n            inputArguments: msg.payload.inputArguments\n          }]\n\n          session.call(methodCalls, function (err: Error | null, results?: CallMethodResult[]) {\n            if (err) {\n              reject(err)\n            } else {\n              resolve({results, msg})\n            }\n          })\n        } catch (err) {\n          reject(err)\n        }\n      }\n    })\n}\n\nconst buildMessagesFromMethodCalls = function (methodCallsResults: CallMethodResult[]) {\n  return new Promise(\n    function (resolve, reject) {\n      if (!methodCallsResults) {\n        reject(new Error('Methods Call Results To Messages Session Not Valid'))\n      } else {\n        let resultMessages: TodoTypeAny[] = []\n        resolve({methodCallsResults: methodCallsResults, messages: resultMessages})\n      }\n    })\n}\n\nconst invalidMessage = function (node: TodoTypeAny, message: TodoTypeAny, handleMethodWarn: (message: TodoTypeAny) => void) {\n  let response = false\n\n  if (!message.payload.objectId) {\n    handleMethodWarn('No Object-Id Found For Method Call')\n    response = true\n  }\n\n  if (!message.payload.methodId) {\n    handleMethodWarn('No Method-Id Found For Method Call')\n    response = true\n  }\n\n  if (!message.payload.inputArguments) {\n    handleMethodWarn('No Input Arguments Found For Method Call')\n    response = true\n  }\n\n  if (!message.payload.methodType) {\n    handleMethodWarn('No Method Type Found For Method Call')\n    response = true\n  }\n\n  return response\n}\n\nconst buildCallMessage = function (node: TodoTypeAny, msg: TodoTypeAny) {\n  let message = msg\n  message.payload.objectId = msg.payload.objectId || node.objectId\n  message.payload.methodId = msg.payload.methodId || node.methodId\n  message.payload.methodType = msg.payload.methodType || node.methodType\n  message.payload.inputArguments = msg.payload.inputArguments || node.inputArguments\n  message.payload.nodetype = 'method'\n  return message\n}\n\nconst coreMethod = {\n  internalDebugLog,\n  detailDebugLog,\n\n  getArgumentDefinition,\n  callMethods,\n  buildMessagesFromMethodCalls,\n  invalidMessage,\n  buildCallMessage,\n}\n\nexport default coreMethod\n"]}